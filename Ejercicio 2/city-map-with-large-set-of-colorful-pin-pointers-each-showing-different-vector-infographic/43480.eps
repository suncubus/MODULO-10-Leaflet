%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1405.m00.i103.n030.P.c25.City map with pin pointers.eps
%%Creator: Adobe Illustrator(R) 17.1
%%For: Алексей Егоров
%%CreationDate: 6/6/2014
%%BoundingBox: 0 0 400 500
%%HiResBoundingBox: 0 0 400 500
%%CropBox: 0 0 400 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.1.0 x273 R agm 4.7709 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">РџРµС‡Р°С‚СЊ</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2014-06-06T14:18:04+04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-06-06T14:18:04+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-06-06T14:18:04+04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>208</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADQAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9A4q7FU0tf8AeIfJv1nF&#xA;Ulnu7eAEyNTiOTUBbiOlW4g0HzzHy6rHjNSO/wA/nXJux4Jz5BVR0dA6EMjCqsNwQe4y+MgRY5NR&#xA;BBopL5z0uXUvL9xDCvKeOk0SjqSh3A+a1pmXo8ohkBPJxNZiM8ZA5ofyb5jstQ0u3tmlVL63RYpI&#xA;WIDNwFAyjvUDtk9Zp5QmT/CWGj1MZwAv1BkeYTmuxVSe8tE+3PGvzZR+s5IQJ6MTMDqs/SGn/wDL&#xA;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&#xA;/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:3ac2d813-9303-ef40-a2b4-37e55419c331</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:3ac2d813-9303-ef40-a2b4-37e55419c331</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:04AC000C76DEE3118A94ADD540900CA6</stRef:instanceID>
            <stRef:documentID>xmp.did:04AC000C76DEE3118A94ADD540900CA6</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:04AC000C76DEE3118A94ADD540900CA6</stEvt:instanceID>
                  <stEvt:when>2014-05-18T16:33:57+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3ac2d813-9303-ef40-a2b4-37e55419c331</stEvt:instanceID>
                  <stEvt:when>2014-06-06T14:18:04+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>400.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=106 B=77</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>106</xmpG:green>
                           <xmpG:blue>77</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=233 G=64 B=27</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>233</xmpG:red>
                           <xmpG:green>64</xmpG:green>
                           <xmpG:blue>27</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=138 B=19</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>138</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=176 B=64</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>64</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=139 G=179 B=47</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>139</xmpG:red>
                           <xmpG:green>179</xmpG:green>
                           <xmpG:blue>47</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=104 G=134 B=35</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>104</xmpG:red>
                           <xmpG:green>134</xmpG:green>
                           <xmpG:blue>35</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=98 G=189 B=79</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>98</xmpG:red>
                           <xmpG:green>189</xmpG:green>
                           <xmpG:blue>79</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=180 G=229 B=232</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>180</xmpG:red>
                           <xmpG:green>229</xmpG:green>
                           <xmpG:blue>232</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=78 G=175 B=189</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>78</xmpG:red>
                           <xmpG:green>175</xmpG:green>
                           <xmpG:blue>189</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=159 G=207 B=214</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>159</xmpG:red>
                           <xmpG:green>207</xmpG:green>
                           <xmpG:blue>214</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=34 G=155 B=173</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>34</xmpG:red>
                           <xmpG:green>155</xmpG:green>
                           <xmpG:blue>173</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=39 G=170 B=225</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>39</xmpG:red>
                           <xmpG:green>170</xmpG:green>
                           <xmpG:blue>225</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=73 G=145 B=201</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>73</xmpG:red>
                           <xmpG:green>145</xmpG:green>
                           <xmpG:blue>201</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=28 G=117 B=188</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>28</xmpG:red>
                           <xmpG:green>117</xmpG:green>
                           <xmpG:blue>188</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=236 G=0 B=140</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>236</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>140</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=160 G=16 B=101</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>160</xmpG:red>
                           <xmpG:green>16</xmpG:green>
                           <xmpG:blue>101</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=204 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=225 G=225 B=225</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>225</xmpG:red>
                           <xmpG:green>225</xmpG:green>
                           <xmpG:blue>225</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=227 G=227 B=227</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>227</xmpG:red>
                           <xmpG:green>227</xmpG:green>
                           <xmpG:blue>227</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=237 B=237</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>237</xmpG:green>
                           <xmpG:blue>237</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=245 G=245 B=245</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>245</xmpG:red>
                           <xmpG:green>245</xmpG:green>
                           <xmpG:blue>245</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=246 G=246 B=246</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>246</xmpG:red>
                           <xmpG:green>246</xmpG:green>
                           <xmpG:blue>246</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
400 500 li
400 0 li
cp
clp
400 0 mo
0 0 li
0 225.267 li
400 225.267 li
400 0 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.882353 .882353 .882353 rgb
f
0 225.267 mo
0 500 li
400 500 li
400 225.267 li
0 225.267 li
cp
1 1 1 rgb
f
200 225.143 mo
193.036 225.143 li
193.036 54.9429 li
200 54.9429 li
200 225.143 li
cp
.964706 .964706 .964706 rgb
f
198.334 204.289 mo
198.334 197.324 li
358.592 197.324 li
358.592 204.289 li
198.334 204.289 li
cp
f
400 115.835 mo
400 108.871 li
0 108.871 li
0 115.835 li
400 115.835 li
cp
f
45.6807 154.888 mo
35.4219 154.888 li
35.4219 .025391 li
45.6807 .025391 li
45.6807 154.888 li
cp
f
113.75 43.834 mo
10.3955 43.834 li
10.3955 37.4922 li
113.75 37.4922 li
113.75 43.834 li
cp
f
6.74951 186.149 mo
6.74951 191.104 10.8325 195.119 15.8662 195.119 cv
15.8662 177.177 li
10.8325 177.177 6.74951 181.194 6.74951 186.149 cv
cp
.545098 .701961 .184314 rgb
f
15.8662 177.177 mo
15.8662 195.119 li
20.8999 195.119 24.98 191.104 24.98 186.149 cv
24.98 181.194 20.8999 177.177 15.8662 177.177 cv
cp
.407843 .52549 .137255 rgb
f
15.2095 182.252 mo
15.2095 205.513 li
15.8662 205.513 li
15.8662 182.252 li
15.2095 182.252 li
cp
.545098 .701961 .184314 rgb
f
16.5195 182.252 mo
16.0093 182.252 li
15.8662 182.252 li
15.8662 205.513 li
16.5195 205.513 li
16.5195 182.252 li
cp
.407843 .52549 .137255 rgb
f
32.4756 186.149 mo
32.4756 191.104 36.5586 195.119 41.5923 195.119 cv
41.5923 177.177 li
36.5586 177.177 32.4756 181.194 32.4756 186.149 cv
cp
.545098 .701961 .184314 rgb
f
41.5923 177.177 mo
41.5923 195.119 li
46.626 195.119 50.7061 191.104 50.7061 186.149 cv
50.7061 181.194 46.626 177.177 41.5923 177.177 cv
cp
.407843 .52549 .137255 rgb
f
40.9355 182.252 mo
40.9355 205.513 li
41.5923 205.513 li
41.5923 182.252 li
40.9355 182.252 li
cp
.545098 .701961 .184314 rgb
f
42.2456 182.252 mo
41.7354 182.252 li
41.5923 182.252 li
41.5923 205.513 li
42.2456 205.513 li
42.2456 182.252 li
cp
.407843 .52549 .137255 rgb
f
59.7363 186.149 mo
59.7363 191.104 63.8193 195.119 68.853 195.119 cv
68.853 177.177 li
63.8193 177.177 59.7363 181.194 59.7363 186.149 cv
cp
.545098 .701961 .184314 rgb
f
68.853 177.177 mo
68.853 195.119 li
73.8867 195.119 77.9668 191.104 77.9668 186.149 cv
77.9668 181.194 73.8867 177.177 68.853 177.177 cv
cp
.407843 .52549 .137255 rgb
f
68.1963 182.252 mo
68.1963 205.513 li
68.853 205.513 li
68.853 182.252 li
68.1963 182.252 li
cp
.545098 .701961 .184314 rgb
f
69.5063 182.252 mo
68.9961 182.252 li
68.853 182.252 li
68.853 205.513 li
69.5063 205.513 li
69.5063 182.252 li
cp
.407843 .52549 .137255 rgb
f
93.8291 83.4648 mo
93.8291 88.4189 97.9121 92.4346 102.946 92.4346 cv
102.946 74.4922 li
97.9121 74.4922 93.8291 78.5098 93.8291 83.4648 cv
cp
.545098 .701961 .184314 rgb
f
102.946 74.4922 mo
102.946 92.4346 li
107.979 92.4346 112.06 88.4189 112.06 83.4648 cv
112.06 78.5098 107.979 74.4922 102.946 74.4922 cv
cp
.407843 .52549 .137255 rgb
f
102.289 79.5674 mo
102.289 102.828 li
102.946 102.828 li
102.946 79.5674 li
102.289 79.5674 li
cp
.545098 .701961 .184314 rgb
f
103.599 79.5674 mo
103.089 79.5674 li
102.946 79.5674 li
102.946 102.828 li
103.599 102.828 li
103.599 79.5674 li
cp
.407843 .52549 .137255 rgb
f
59.7241 146.838 mo
0 146.806 li
0 155.75 li
59.7241 155.831 li
76.7134 155.838 92.2495 165.373 92.2324 177.527 cv
92.2324 225.143 li
103.07 225.143 li
103.07 177.877 li
103.107 160.781 83.6597 146.855 59.7241 146.838 cv
cp
.964706 .964706 .964706 rgb
f
155.78 143.524 mo
149.198 143.524 143.845 148.878 143.845 155.46 cv
143.845 167.313 li
143.85 168.488 li
143.85 194.381 li
143.85 197.924 140.966 200.807 137.423 200.807 cv
97.3335 200.806 li
97.3335 206.314 li
137.423 206.316 li
144.004 206.316 149.357 200.961 149.357 194.381 cv
149.354 155.46 li
149.354 151.916 152.236 149.033 155.78 149.033 cv
239.23 149.033 li
239.23 143.524 li
155.78 143.524 li
cp
f
79.4463 138.027 mo
51.5352 138.027 li
51.5352 120.81 li
79.4463 120.81 li
79.4463 138.027 li
cp
f
82.4805 68.9053 mo
54.5693 68.9053 li
54.5693 51.688 li
82.4805 51.688 li
82.4805 68.9053 li
cp
f
107.5 68.9053 mo
91.5 68.9053 li
91.5 51.688 li
107.5 51.688 li
107.5 68.9053 li
cp
f
71.5469 101.745 mo
55.5469 101.745 li
55.5469 84.5278 li
71.5469 84.5278 li
71.5469 101.745 li
cp
f
113.75 129.027 mo
85.5264 129.027 li
85.5264 120.81 li
113.75 120.81 li
113.75 129.027 li
cp
f
134.75 143.524 mo
121 143.524 li
121 120.81 li
134.75 120.81 li
134.75 143.524 li
cp
f
51.2568 164.73 mo
50.5859 164.73 50.043 164.188 50.043 163.517 cv
50.043 155.552 li
50.043 154.881 50.5859 154.338 51.2568 154.338 cv
55.5 154.338 li
55.5 152.298 li
49.5918 152.298 li
48.6582 152.298 47.9023 153.055 47.9023 153.988 cv
47.9023 165.08 li
47.9023 166.014 48.6582 166.77 49.5918 166.77 cv
53.041 166.77 li
54.0352 170.068 li
55.5 174.92 li
55.5 164.73 li
51.2568 164.73 li
cp
.152941 .666667 .882353 rgb
f
61.4082 152.298 mo
55.5 152.298 li
55.5 154.338 li
59.7422 154.338 li
60.4131 154.338 60.957 154.881 60.957 155.552 cv
60.957 163.517 li
60.957 164.188 60.4131 164.73 59.7422 164.73 cv
55.5 164.73 li
55.5 174.92 li
56.9648 170.068 li
57.959 166.77 li
61.4082 166.77 li
62.3418 166.77 63.0977 166.014 63.0977 165.08 cv
63.0977 153.988 li
63.0977 153.055 62.3418 152.298 61.4082 152.298 cv
cp
.109804 .458824 .737255 rgb
f
59.7422 164.73 mo
60.4131 164.73 60.957 164.188 60.957 163.517 cv
60.957 155.552 li
60.957 154.881 60.4131 154.338 59.7422 154.338 cv
55.5 154.338 li
55.5 164.73 li
59.7422 164.73 li
cp
.890196 .890196 .890196 rgb
f
50.043 155.552 mo
50.043 163.517 li
50.043 164.188 50.5859 164.73 51.2568 164.73 cv
55.5 164.73 li
55.5 154.338 li
51.2568 154.338 li
50.5859 154.338 50.043 154.881 50.043 155.552 cv
cp
.964706 .964706 .964706 rgb
f
350.549 139.148 mo
349.878 139.148 349.335 138.606 349.335 137.935 cv
349.335 129.97 li
349.335 129.299 349.878 128.756 350.549 128.756 cv
354.792 128.756 li
354.792 126.716 li
348.884 126.716 li
347.95 126.716 347.194 127.473 347.194 128.406 cv
347.194 139.499 li
347.194 140.432 347.95 141.189 348.884 141.189 cv
352.333 141.189 li
353.327 144.486 li
354.792 149.338 li
354.792 139.148 li
350.549 139.148 li
cp
.984314 .690196 .25098 rgb
f
360.7 126.716 mo
354.792 126.716 li
354.792 128.756 li
359.034 128.756 li
359.705 128.756 360.249 129.299 360.249 129.97 cv
360.249 137.935 li
360.249 138.606 359.705 139.148 359.034 139.148 cv
354.792 139.148 li
354.792 149.338 li
356.257 144.486 li
357.251 141.189 li
360.7 141.189 li
361.634 141.189 362.39 140.432 362.39 139.499 cv
362.39 128.406 li
362.39 127.473 361.634 126.716 360.7 126.716 cv
cp
.94902 .541176 .0745098 rgb
f
359.034 139.148 mo
359.705 139.148 360.249 138.606 360.249 137.935 cv
360.249 129.97 li
360.249 129.299 359.705 128.756 359.034 128.756 cv
354.792 128.756 li
354.792 139.148 li
359.034 139.148 li
cp
.890196 .890196 .890196 rgb
f
349.335 129.97 mo
349.335 137.935 li
349.335 138.606 349.878 139.148 350.549 139.148 cv
354.792 139.148 li
354.792 128.756 li
350.549 128.756 li
349.878 128.756 349.335 129.299 349.335 129.97 cv
cp
.964706 .964706 .964706 rgb
f
52.9092 19.8472 mo
52.9092 16.9102 55.29 14.5283 58.2275 14.5283 cv
58.2275 12.249 li
54.0322 12.249 50.6299 15.6514 50.6299 19.8472 cv
50.6299 23.3716 53.0283 26.334 56.2822 27.1929 cv
56.292 27.2344 li
58.2275 34.8823 li
58.2275 25.166 li
55.29 25.166 52.9092 22.7847 52.9092 19.8472 cv
cp
.984314 .690196 .25098 rgb
f
58.2275 12.249 mo
58.2275 14.5283 li
61.165 14.5283 63.5469 16.9102 63.5469 19.8472 cv
63.5469 22.7847 61.165 25.166 58.2275 25.166 cv
58.2275 34.8823 li
60.1631 27.2344 li
60.1738 27.1929 li
63.4268 26.3335 65.8262 23.3716 65.8262 19.8472 cv
65.8262 15.6514 62.4248 12.249 58.2275 12.249 cv
cp
.94902 .541176 .0745098 rgb
f
52.9092 19.8472 mo
52.9092 22.7847 55.29 25.166 58.2275 25.166 cv
58.2275 14.5283 li
55.29 14.5283 52.9092 16.9102 52.9092 19.8472 cv
cp
.964706 .964706 .964706 rgb
f
63.5469 19.8472 mo
63.5469 16.9102 61.165 14.5283 58.2275 14.5283 cv
58.2275 25.166 li
61.165 25.166 63.5469 22.7847 63.5469 19.8472 cv
cp
.890196 .890196 .890196 rgb
f
241.506 202.598 mo
241.506 199.66 243.887 197.278 246.824 197.278 cv
246.824 194.999 li
242.629 194.999 239.227 198.401 239.227 202.598 cv
239.227 206.121 241.625 209.084 244.879 209.943 cv
244.889 209.984 li
246.824 217.633 li
246.824 207.916 li
243.887 207.916 241.506 205.535 241.506 202.598 cv
cp
.945098 .415686 .301961 rgb
f
246.824 194.999 mo
246.824 197.278 li
249.762 197.278 252.144 199.66 252.144 202.598 cv
252.144 205.535 249.762 207.916 246.824 207.916 cv
246.824 217.633 li
248.76 209.984 li
248.77 209.943 li
252.023 209.084 254.423 206.121 254.423 202.598 cv
254.423 198.401 251.021 194.999 246.824 194.999 cv
cp
.913725 .25098 .105882 rgb
f
241.506 202.598 mo
241.506 205.535 243.887 207.916 246.824 207.916 cv
246.824 197.278 li
243.887 197.278 241.506 199.66 241.506 202.598 cv
cp
.964706 .964706 .964706 rgb
f
252.144 202.598 mo
252.144 199.66 249.762 197.278 246.824 197.278 cv
246.824 207.916 li
249.762 207.916 252.144 205.535 252.144 202.598 cv
cp
.890196 .890196 .890196 rgb
f
253.919 137.076 mo
253.919 140.619 251.035 143.503 247.492 143.503 cv
207.402 143.501 li
207.402 149.01 li
247.492 149.012 li
254.073 149.012 259.427 143.657 259.427 137.076 cv
259.424 112.353 li
253.919 112.353 li
253.919 137.076 li
cp
.964706 .964706 .964706 rgb
f
15.1387 70.7988 mo
15.1387 67.8813 17.5059 65.5151 20.4229 65.5151 cv
20.4229 63.2515 li
16.2539 63.2515 12.875 66.6304 12.875 70.7988 cv
12.875 74.2988 15.2578 77.2422 18.4893 78.0957 cv
18.5 78.1367 li
20.4229 85.7329 li
20.4229 76.082 li
17.5059 76.082 15.1387 73.7168 15.1387 70.7988 cv
cp
.92549 0 .54902 rgb
f
20.4229 63.2515 mo
20.4229 65.5151 li
23.3398 65.5151 25.7051 67.8813 25.7051 70.7988 cv
25.7051 73.7168 23.3398 76.082 20.4229 76.082 cv
20.4229 85.7329 li
22.3457 78.1367 li
22.3564 78.0957 li
25.5879 77.2417 27.9707 74.2988 27.9707 70.7988 cv
27.9707 66.6304 24.5908 63.2515 20.4229 63.2515 cv
cp
.627451 .0627451 .396078 rgb
f
17.4238 70.8008 mo
17.4238 69.146 18.7656 67.8027 20.4229 67.8027 cv
20.4229 65.5151 li
17.5059 65.5151 15.1387 67.8813 15.1387 70.7988 cv
15.1387 73.7168 17.5059 76.082 20.4229 76.082 cv
20.4229 73.7993 li
18.7656 73.7993 17.4238 72.457 17.4238 70.8008 cv
cp
f
20.4229 65.5151 mo
20.4229 67.8027 li
22.0791 67.8027 23.4209 69.146 23.4209 70.8008 cv
23.4209 72.457 22.0791 73.7993 20.4229 73.7993 cv
20.4229 76.082 li
23.3398 76.082 25.7051 73.7168 25.7051 70.7988 cv
25.7051 67.8813 23.3398 65.5151 20.4229 65.5151 cv
cp
.92549 0 .54902 rgb
f
231.341 125.088 mo
231.341 122.171 233.708 119.805 236.625 119.805 cv
236.625 117.541 li
232.456 117.541 229.077 120.92 229.077 125.088 cv
229.077 128.588 231.46 131.532 234.691 132.385 cv
234.702 132.426 li
236.625 140.023 li
236.625 130.372 li
233.708 130.372 231.341 128.006 231.341 125.088 cv
cp
.152941 .666667 .882353 rgb
f
236.625 117.541 mo
236.625 119.805 li
239.542 119.805 241.907 122.171 241.907 125.088 cv
241.907 128.006 239.542 130.372 236.625 130.372 cv
236.625 140.023 li
238.548 132.426 li
238.559 132.385 li
241.79 131.531 244.173 128.588 244.173 125.088 cv
244.173 120.92 240.793 117.541 236.625 117.541 cv
cp
.109804 .458824 .737255 rgb
f
233.626 125.09 mo
233.626 123.436 234.968 122.092 236.625 122.092 cv
236.625 119.805 li
233.708 119.805 231.341 122.171 231.341 125.088 cv
231.341 128.006 233.708 130.372 236.625 130.372 cv
236.625 128.089 li
234.968 128.089 233.626 126.747 233.626 125.09 cv
cp
f
236.625 119.805 mo
236.625 122.092 li
238.281 122.092 239.623 123.436 239.623 125.09 cv
239.623 126.747 238.281 128.089 236.625 128.089 cv
236.625 130.372 li
239.542 130.372 241.907 128.006 241.907 125.088 cv
241.907 122.171 239.542 119.805 236.625 119.805 cv
cp
.152941 .666667 .882353 rgb
f
120.761 164.857 mo
120.761 161.939 123.128 159.573 126.045 159.573 cv
126.045 157.31 li
121.876 157.31 118.497 160.689 118.497 164.857 cv
118.497 168.357 120.88 171.301 124.111 172.154 cv
124.122 172.195 li
126.045 179.791 li
126.045 170.141 li
123.128 170.141 120.761 167.775 120.761 164.857 cv
cp
.545098 .701961 .184314 rgb
f
126.045 157.31 mo
126.045 159.573 li
128.962 159.573 131.327 161.939 131.327 164.857 cv
131.327 167.775 128.962 170.141 126.045 170.141 cv
126.045 179.791 li
127.968 172.195 li
127.979 172.154 li
131.21 171.3 133.593 168.357 133.593 164.857 cv
133.593 160.689 130.213 157.31 126.045 157.31 cv
cp
.407843 .52549 .137255 rgb
f
123.046 164.859 mo
123.046 163.204 124.388 161.861 126.045 161.861 cv
126.045 159.573 li
123.128 159.573 120.761 161.939 120.761 164.857 cv
120.761 167.775 123.128 170.141 126.045 170.141 cv
126.045 167.857 li
124.388 167.857 123.046 166.516 123.046 164.859 cv
cp
f
126.045 159.573 mo
126.045 161.861 li
127.701 161.861 129.043 163.204 129.043 164.859 cv
129.043 166.516 127.701 167.857 126.045 167.857 cv
126.045 170.141 li
128.962 170.141 131.327 167.775 131.327 164.857 cv
131.327 161.939 128.962 159.573 126.045 159.573 cv
cp
.545098 .701961 .184314 rgb
f
383.265 51.2495 mo
383.265 48.332 385.632 45.9658 388.549 45.9658 cv
388.549 43.7021 li
384.38 43.7021 381.001 47.0811 381.001 51.2495 cv
381.001 54.7495 383.384 57.6929 386.615 58.5464 cv
386.626 58.5874 li
388.549 66.1836 li
388.549 56.5327 li
385.632 56.5327 383.265 54.1675 383.265 51.2495 cv
cp
.984314 .690196 .25098 rgb
f
388.549 43.7021 mo
388.549 45.9658 li
391.466 45.9658 393.831 48.332 393.831 51.2495 cv
393.831 54.1675 391.466 56.5327 388.549 56.5327 cv
388.549 66.1836 li
390.472 58.5874 li
390.482 58.5464 li
393.714 57.6924 396.097 54.7495 396.097 51.2495 cv
396.097 47.0811 392.717 43.7021 388.549 43.7021 cv
cp
.94902 .541176 .0745098 rgb
f
385.55 51.2515 mo
385.55 49.5967 386.892 48.2534 388.549 48.2534 cv
388.549 45.9658 li
385.632 45.9658 383.265 48.332 383.265 51.2495 cv
383.265 54.1675 385.632 56.5327 388.549 56.5327 cv
388.549 54.25 li
386.892 54.25 385.55 52.9077 385.55 51.2515 cv
cp
f
388.549 45.9658 mo
388.549 48.2534 li
390.205 48.2534 391.547 49.5967 391.547 51.2515 cv
391.547 52.9077 390.205 54.25 388.549 54.25 cv
388.549 56.5327 li
391.466 56.5327 393.831 54.1675 393.831 51.2495 cv
393.831 48.332 391.466 45.9658 388.549 45.9658 cv
cp
.984314 .690196 .25098 rgb
f
360.827 169.357 mo
360.827 162.775 355.474 157.422 348.892 157.422 cv
337.04 157.422 li
335.864 157.428 li
309.972 157.428 li
306.429 157.428 303.544 154.544 303.544 151.001 cv
303.546 110.912 li
298.038 110.912 li
298.036 151.001 li
298.036 157.582 303.39 162.936 309.972 162.936 cv
348.892 162.932 li
352.435 162.932 355.319 165.814 355.319 169.357 cv
355.319 225.146 li
360.827 225.146 li
360.827 169.357 li
cp
.964706 .964706 .964706 rgb
f
341.963 137.646 mo
315 137.646 li
315 122.203 li
341.963 122.203 li
341.963 137.646 li
cp
f
299.239 103.85 mo
281.938 103.85 li
281.938 94.252 li
299.239 94.252 li
299.239 103.85 li
cp
f
345.191 103.85 mo
314.436 103.85 li
314.436 94.252 li
345.191 94.252 li
345.191 103.85 li
cp
f
380.423 103.85 mo
363.121 103.85 li
363.121 94.252 li
380.423 94.252 li
380.423 103.85 li
cp
f
391.501 216.375 mo
370.501 216.375 li
370.501 192.202 li
391.501 192.202 li
391.501 216.375 li
cp
f
391.501 176.361 mo
370.501 176.361 li
370.501 122.203 li
391.501 122.203 li
391.501 176.361 li
cp
f
360.249 187.747 mo
360.249 182.239 li
400 182.239 li
400 187.747 li
360.249 187.747 li
cp
f
196.316 122.425 mo
189.61 122.425 184.192 118.125 184.192 112.803 cv
184.192 107.486 189.61 103.176 196.316 103.176 cv
203.001 103.176 208.431 107.486 208.431 112.803 cv
208.431 118.125 203.001 122.425 196.316 122.425 cv
cp
196.318 99.0508 mo
186.738 99.0508 178.998 105.21 178.998 112.804 cv
178.998 120.407 186.738 126.55 196.318 126.55 cv
205.867 126.55 213.625 120.407 213.625 112.804 cv
213.625 105.21 205.867 99.0508 196.318 99.0508 cv
cp
.960784 .960784 .960784 rgb
f
196.314 117.998 mo
192.693 117.998 189.768 115.676 189.768 112.802 cv
189.768 109.931 192.693 107.604 196.314 107.604 cv
199.924 107.604 202.856 109.931 202.856 112.802 cv
202.856 115.676 199.924 117.998 196.314 117.998 cv
cp
196.316 103.176 mo
189.61 103.176 184.192 107.486 184.192 112.803 cv
184.192 118.125 189.61 122.425 196.316 122.425 cv
203.001 122.425 208.431 118.125 208.431 112.803 cv
208.431 107.486 203.001 103.176 196.316 103.176 cv
cp
.882353 .882353 .882353 rgb
f
203.164 112.8 mo
203.164 115.829 200.098 118.285 196.313 118.285 cv
192.53 118.285 189.463 115.829 189.463 112.8 cv
189.463 109.772 192.53 107.317 196.313 107.317 cv
200.098 107.317 203.164 109.772 203.164 112.8 cv
cp
.960784 .960784 .960784 rgb
f
344.884 183.977 mo
347.161 183.977 li
342.949 176.676 li
345.335 176.676 li
340.563 168.407 li
340.563 191.458 li
349.201 191.458 li
344.884 183.977 li
cp
.407843 .52549 .137255 rgb
f
335.786 176.676 mo
338.174 176.676 li
333.959 183.977 li
336.24 183.977 li
331.921 191.458 li
340.563 191.458 li
340.563 168.407 li
335.786 176.676 li
cp
.545098 .701961 .184314 rgb
f
224.156 60.46 mo
224.156 45.0811 211.688 32.6147 196.313 32.6147 cv
196.313 45.4663 li
204.594 45.4663 211.308 52.1797 211.308 60.46 cv
211.308 68.7407 204.594 75.4536 196.313 75.4536 cv
196.313 88.3013 li
196.313 113.915 li
196.313 113.915 209.452 92.9097 214.406 85.8359 cv
225.415 70.1211 224.156 60.46 224.156 60.46 cv
cp
.913725 .25098 .105882 rgb
f
196.313 45.4663 mo
196.313 32.6147 li
180.936 32.6147 168.467 45.0811 168.467 60.46 cv
168.467 60.46 167.21 70.1211 178.219 85.8359 cv
183.174 92.9097 196.313 113.915 196.313 113.915 cv
196.313 88.3013 li
196.313 75.4536 li
188.032 75.4536 181.318 68.7407 181.318 60.46 cv
181.318 52.1797 188.032 45.4663 196.313 45.4663 cv
cp
.945098 .415686 .301961 rgb
f
176.019 60.9556 mo
176.019 72.1626 185.104 81.2476 196.311 81.2476 cv
196.311 40.6631 li
185.104 40.6631 176.019 49.7471 176.019 60.9556 cv
cp
.964706 .964706 .964706 rgb
f
196.311 40.6631 mo
196.311 81.2476 li
207.518 81.2476 216.604 72.1626 216.604 60.9556 cv
216.604 49.7471 207.518 40.6631 196.311 40.6631 cv
cp
.890196 .890196 .890196 rgb
f
315.862 74.1196 mo
318.669 74.1196 li
313.48 65.127 li
316.419 65.127 li
310.54 54.9429 li
310.54 83.3335 li
321.183 83.3335 li
315.862 74.1196 li
cp
.407843 .52549 .137255 rgb
f
304.658 65.127 mo
307.6 65.127 li
302.409 74.1196 li
305.218 74.1196 li
299.897 83.3335 li
310.54 83.3335 li
310.54 54.9429 li
304.658 65.127 li
cp
.545098 .701961 .184314 rgb
f
345.192 74.1196 mo
347.999 74.1196 li
342.81 65.127 li
345.749 65.127 li
339.87 54.9429 li
339.87 83.3335 li
350.513 83.3335 li
345.192 74.1196 li
cp
.407843 .52549 .137255 rgb
f
333.988 65.127 mo
336.93 65.127 li
331.739 74.1196 li
334.548 74.1196 li
329.227 83.3335 li
339.87 83.3335 li
339.87 54.9429 li
333.988 65.127 li
cp
.545098 .701961 .184314 rgb
f
373.765 74.1196 mo
376.571 74.1196 li
371.382 65.127 li
374.321 65.127 li
368.442 54.9429 li
368.442 83.3335 li
379.084 83.3335 li
373.765 74.1196 li
cp
.407843 .52549 .137255 rgb
f
362.56 65.127 mo
365.501 65.127 li
360.31 74.1196 li
363.12 74.1196 li
357.8 83.3335 li
368.442 83.3335 li
368.442 54.9429 li
362.56 65.127 li
cp
.545098 .701961 .184314 rgb
f
251.167 111.837 mo
247.167 111.837 li
247.167 111.195 247.258 96.0469 255.174 89.0308 cv
261.807 83.1504 264.388 74.8633 264.59 69.0684 cv
265.092 54.7158 266.159 34.7861 266.17 34.5864 cv
270.164 34.8013 li
270.153 35.0005 269.088 54.8931 268.588 69.208 cv
268.476 72.4224 267.366 83.5679 257.826 92.0239 cv
251.243 97.8599 251.167 111.698 251.167 111.837 cv
cp
.964706 .964706 .964706 rgb
f
305.399 15.7319 mo
305.399 11.644 302.087 8.33154 298 8.33154 cv
298 11.7466 li
300.201 11.7466 301.985 13.5313 301.985 15.7319 cv
301.985 17.9316 300.201 19.7163 298 19.7163 cv
298 23.1304 li
298 29.937 li
298 29.937 301.492 24.355 302.81 22.4751 cv
305.734 18.2988 305.399 15.7319 305.399 15.7319 cv
cp
.407843 .52549 .137255 rgb
f
298 11.7466 mo
298 8.33154 li
293.915 8.33154 290.601 11.644 290.601 15.7319 cv
290.601 15.7319 290.266 18.2988 293.191 22.4751 cv
294.508 24.355 298 29.937 298 29.937 cv
298 23.1304 li
298 19.7163 li
295.799 19.7163 294.017 17.9316 294.017 15.7319 cv
294.017 13.5313 295.799 11.7466 298 11.7466 cv
cp
.545098 .701961 .184314 rgb
f
292.607 15.8628 mo
292.607 18.8418 295.021 21.2559 298 21.2559 cv
298 10.4702 li
295.021 10.4702 292.607 12.8843 292.607 15.8628 cv
cp
.964706 .964706 .964706 rgb
f
298 10.4702 mo
298 21.2559 li
300.978 21.2559 303.393 18.8418 303.393 15.8628 cv
303.393 12.8843 300.978 10.4702 298 10.4702 cv
cp
.890196 .890196 .890196 rgb
f
257.71 26.3477 mo
259.137 26.3477 li
261.805 18.5137 li
260.171 14.2935 li
255.01 18.7935 li
252.085 26.3477 li
254.262 26.3477 li
257.71 26.3477 li
cp
.152941 .666667 .882353 rgb
f
260.171 14.2935 mo
258.461 9.87695 li
255.833 16.665 li
255.01 18.7935 li
260.171 14.2935 li
cp
1 1 1 rgb
f
268.185 26.3477 mo
272.15 17.3872 li
269.082 8.37695 li
263.407 13.8086 li
261.805 18.5137 li
259.137 26.3477 li
268.185 26.3477 li
cp
.152941 .666667 .882353 rgb
f
267.17 2.75977 mo
263.407 13.8091 li
263.407 13.8086 li
269.082 8.37695 li
267.17 2.75977 li
cp
1 1 1 rgb
f
284.249 26.3477 mo
278.236 12.7593 li
272.407 16.8062 li
272.15 17.3872 li
268.185 26.3477 li
284.249 26.3477 li
cp
.152941 .666667 .882353 rgb
f
278.236 12.7593 mo
276.217 8.19824 li
273.138 15.1577 li
272.407 16.8062 li
278.236 12.7593 li
cp
1 1 1 rgb
f
320.035 26.3477 mo
321.462 26.3477 li
324.13 18.5137 li
322.496 14.2935 li
317.335 18.7935 li
314.41 26.3477 li
316.587 26.3477 li
320.035 26.3477 li
cp
.152941 .666667 .882353 rgb
f
322.496 14.2935 mo
320.786 9.87695 li
318.158 16.665 li
317.335 18.7935 li
322.496 14.2935 li
cp
1 1 1 rgb
f
330.511 26.3477 mo
334.476 17.3872 li
331.407 8.37695 li
325.732 13.8086 li
324.13 18.5137 li
321.462 26.3477 li
330.511 26.3477 li
cp
.152941 .666667 .882353 rgb
f
329.495 2.75977 mo
325.732 13.8091 li
325.732 13.8086 li
331.407 8.37695 li
329.495 2.75977 li
cp
1 1 1 rgb
f
346.574 26.3477 mo
340.561 12.7593 li
334.732 16.8062 li
334.476 17.3872 li
330.511 26.3477 li
346.574 26.3477 li
cp
.152941 .666667 .882353 rgb
f
340.561 12.7593 mo
338.542 8.19824 li
335.463 15.1577 li
334.732 16.8062 li
340.561 12.7593 li
cp
1 1 1 rgb
f
268.747 61.1406 mo
265.085 59.5352 li
265.49 58.5532 269.949 49.8862 301.577 47.8647 cv
307.359 47.4956 313.27 47.2007 318.986 46.916 cv
342.645 45.7363 367.111 44.5171 372.179 37.937 cv
378.231 30.0781 377.166 25.4346 377.155 25.3887 cv
381.001 24.2915 li
381.193 24.938 382.664 30.8789 375.349 40.3774 cv
369.154 48.4199 345.998 49.5742 319.185 50.9111 cv
313.483 51.1953 307.587 51.4893 301.833 51.8569 cv
272.958 53.7021 268.786 61.0664 268.747 61.1406 cv
cp
.964706 .964706 .964706 rgb
f
131.354 111.2 mo
131.159 109.857 126.669 78.1924 135.026 66.2163 cv
137.712 62.3677 139.82 60.1001 141.514 58.2783 cv
144.788 54.7559 146.144 53.2979 147.202 44.4565 cv
147.826 39.2451 147.195 20.5767 147.188 20.3887 cv
151.186 20.252 li
151.213 21.0317 151.833 39.4185 151.173 44.9321 cv
150.009 54.6572 148.269 56.8867 144.443 61.002 cv
142.835 62.7324 140.832 64.8862 138.307 68.5054 cv
130.852 79.189 135.267 110.311 135.313 110.624 cv
131.354 111.2 li
cp
f
310.963 39.3076 mo
307.613 39.3076 304.22 39.2827 300.81 39.2422 cv
298.613 39.2163 296.743 39.1938 295.304 39.1938 cv
284.47 39.1938 246.049 38.2739 206.541 26.4395 cv
181.487 18.9336 157.127 20.5718 137.555 21.8872 cv
122.683 22.8857 110.938 23.6763 102.457 20.5308 cv
89.1294 15.5879 88.6216 .690918 88.6021 0 cv
94.6538 .025391 li
94.8086 1.60742 95.0376 11.3799 104.543 14.9048 cv
111.82 17.6045 123.56 16.8149 137.152 15.9004 cv
157.208 14.5527 182.167 12.8735 208.264 20.6914 cv
246.989 32.2925 284.676 33.1938 295.304 33.1938 cv
296.762 33.1938 298.655 33.2163 300.881 33.2427 cv
315.548 33.4165 354.495 33.8779 361.644 26.6201 cv
369.838 18.3008 396.927 17.9561 399.988 17.9443 cv
399.988 23.9375 li
389.386 23.9819 370.776 25.8975 365.919 30.8301 cv
358.98 37.876 336.27 39.3076 310.963 39.3076 cv
cp
.286275 .568627 .788235 rgb
f
281.176 200.807 mo
278.463 200.807 li
278.463 162.777 li
281.176 162.777 li
281.176 200.807 li
cp
.964706 .964706 .964706 rgb
f
254 175.441 mo
254 172.064 li
329.814 172.064 li
329.814 175.441 li
254 175.441 li
cp
f
243.033 165.861 mo
226.328 165.861 li
226.328 153.777 li
243.033 153.777 li
243.033 165.861 li
cp
f
286.815 132.758 mo
270.11 132.758 li
270.11 120.675 li
286.815 120.675 li
286.815 132.758 li
cp
f
243.033 192.016 mo
209.624 192.016 li
209.624 179.933 li
243.033 179.933 li
243.033 192.016 li
cp
f
188.033 168.818 mo
154.625 168.818 li
154.625 156.735 li
188.033 156.735 li
188.033 168.818 li
cp
f
132.724 197.5 mo
112.92 197.5 li
112.92 185.416 li
132.724 185.416 li
132.724 197.5 li
cp
f
116.009 319.383 mo
116.009 311.304 109.46 304.751 101.381 304.751 cv
101.381 311.506 li
105.731 311.506 109.259 315.032 109.259 319.383 cv
109.259 323.735 105.731 327.262 101.381 327.262 cv
101.381 334.013 li
101.381 347.47 li
101.381 347.47 108.285 336.433 110.888 332.716 cv
116.672 324.46 116.009 319.383 116.009 319.383 cv
cp
.407843 .52549 .137255 rgb
f
101.381 311.506 mo
101.381 304.751 li
93.3027 304.751 86.75 311.304 86.75 319.383 cv
86.75 319.383 86.0889 324.46 91.873 332.716 cv
94.4775 336.433 101.381 347.47 101.381 347.47 cv
101.381 334.013 li
101.381 327.262 li
97.0308 327.262 93.5029 323.735 93.5029 319.383 cv
93.5029 315.032 97.0308 311.506 101.381 311.506 cv
cp
.545098 .701961 .184314 rgb
f
90.7183 319.644 mo
90.7183 325.534 95.4912 330.306 101.379 330.306 cv
101.379 308.983 li
95.4912 308.983 90.7183 313.754 90.7183 319.644 cv
cp
.964706 .964706 .964706 rgb
f
101.379 308.983 mo
101.379 330.306 li
107.269 330.306 112.042 325.534 112.042 319.644 cv
112.042 313.754 107.269 308.983 101.379 308.983 cv
cp
.890196 .890196 .890196 rgb
f
96.1572 316.667 mo
96.1572 319.506 98.4966 321.807 101.381 321.807 cv
101.381 311.525 li
98.4966 311.525 96.1572 313.826 96.1572 316.667 cv
cp
.545098 .701961 .184314 rgb
f
101.381 311.525 mo
101.381 321.807 li
104.267 321.807 106.604 319.506 106.604 316.667 cv
106.604 313.826 104.267 311.525 101.381 311.525 cv
cp
.407843 .52549 .137255 rgb
f
101.005 314.433 mo
101.005 327.763 li
101.381 327.763 li
101.381 314.433 li
101.005 314.433 li
cp
.545098 .701961 .184314 rgb
f
101.756 314.433 mo
101.464 314.433 li
101.381 314.433 li
101.381 327.763 li
101.756 327.763 li
101.756 314.433 li
cp
.407843 .52549 .137255 rgb
f
51.644 319.382 mo
51.644 311.3 45.0947 304.751 37.0146 304.751 cv
37.0146 311.503 li
41.3647 311.503 44.894 315.028 44.894 319.382 cv
44.894 323.731 41.3647 327.261 37.0146 327.261 cv
37.0146 334.009 li
37.0146 347.47 li
37.0146 347.47 43.9189 336.433 46.522 332.714 cv
52.3062 324.456 51.644 319.382 51.644 319.382 cv
cp
.913725 .25098 .105882 rgb
f
37.0146 311.503 mo
37.0146 304.751 li
28.9355 304.751 22.3843 311.3 22.3843 319.382 cv
22.3843 319.382 21.7236 324.456 27.5088 332.714 cv
30.1118 336.433 37.0146 347.47 37.0146 347.47 cv
37.0146 334.009 li
37.0146 327.261 li
32.6636 327.261 29.1372 323.731 29.1372 319.382 cv
29.1372 315.028 32.6636 311.503 37.0146 311.503 cv
cp
.945098 .415686 .301961 rgb
f
26.3516 319.642 mo
26.3516 325.53 31.1255 330.304 37.0137 330.304 cv
37.0137 308.979 li
31.1255 308.979 26.3516 313.753 26.3516 319.642 cv
cp
.964706 .964706 .964706 rgb
f
37.0137 308.979 mo
37.0137 330.304 li
42.9019 330.304 47.6763 325.53 47.6763 319.642 cv
47.6763 313.753 42.9019 308.979 37.0137 308.979 cv
cp
.890196 .890196 .890196 rgb
f
33.9297 313.886 mo
32.2266 313.886 30.8477 315.267 30.8477 316.97 cv
30.8477 317.083 30.8525 317.196 30.8672 317.308 cv
31.1865 321.634 37.0127 326.087 37.0127 326.087 cv
37.0127 316.97 li
37.0127 315.267 35.6333 313.886 33.9297 313.886 cv
cp
.945098 .415686 .301961 rgb
f
40.0957 313.886 mo
38.394 313.886 37.0127 315.267 37.0127 316.97 cv
37.0127 326.087 li
37.0127 326.087 42.8403 321.634 43.1592 317.308 cv
43.1733 317.196 43.1792 317.083 43.1802 316.97 cv
43.1792 315.267 41.7988 313.886 40.0957 313.886 cv
cp
.913725 .25098 .105882 rgb
f
179.541 319.383 mo
179.541 311.302 172.987 304.752 164.911 304.752 cv
164.911 311.505 li
169.26 311.505 172.787 315.031 172.787 319.383 cv
172.787 323.732 169.26 327.263 164.911 327.263 cv
164.911 334.012 li
164.911 347.469 li
164.911 347.469 171.815 336.432 174.418 332.716 cv
180.201 324.459 179.541 319.383 179.541 319.383 cv
cp
.94902 .541176 .0745098 rgb
f
164.911 311.505 mo
164.911 304.752 li
156.83 304.752 150.279 311.302 150.279 319.383 cv
150.279 319.383 149.619 324.459 155.403 332.716 cv
158.007 336.432 164.911 347.469 164.911 347.469 cv
164.911 334.012 li
164.911 327.263 li
160.561 327.263 157.033 323.732 157.033 319.383 cv
157.033 315.031 160.561 311.505 164.911 311.505 cv
cp
.984314 .690196 .25098 rgb
f
154.247 319.644 mo
154.247 325.531 159.02 330.305 164.909 330.305 cv
164.909 308.978 li
159.02 308.978 154.247 313.755 154.247 319.644 cv
cp
.964706 .964706 .964706 rgb
f
164.909 308.978 mo
164.909 330.305 li
170.797 330.305 175.571 325.531 175.571 319.644 cv
175.571 313.755 170.797 308.978 164.909 308.978 cv
cp
.890196 .890196 .890196 rgb
f
164.909 313.575 mo
164.909 313.575 li
164.909 312.796 li
164.909 312.796 li
163.256 312.796 161.911 314.678 161.911 316.992 cv
162.691 316.992 li
162.691 315.107 163.686 313.575 164.909 313.575 cv
cp
.984314 .690196 .25098 rgb
f
167.129 316.992 mo
167.906 316.992 li
167.906 314.678 166.563 312.796 164.909 312.796 cv
164.909 313.575 li
166.133 313.575 167.129 315.107 167.129 316.992 cv
cp
.94902 .541176 .0745098 rgb
f
162.691 316.992 mo
161.911 316.992 li
159.579 316.992 li
159.579 325.732 li
164.909 325.732 li
164.909 316.992 li
162.691 316.992 li
cp
.984314 .690196 .25098 rgb
f
170.239 316.992 mo
167.906 316.992 li
167.129 316.992 li
164.909 316.992 li
164.909 325.732 li
170.239 325.732 li
170.239 316.992 li
cp
.94902 .541176 .0745098 rgb
f
26.7744 256.634 mo
26.7744 250.98 31.3594 246.393 37.0146 246.393 cv
37.0146 242.004 li
28.9341 242.004 22.3853 248.555 22.3853 256.634 cv
22.3853 263.418 27.0039 269.122 33.2681 270.777 cv
33.2886 270.854 li
37.0146 285.583 li
37.0146 266.875 li
31.3594 266.875 26.7744 262.291 26.7744 256.634 cv
cp
.945098 .415686 .301961 rgb
f
37.0146 242.004 mo
37.0146 246.393 li
42.6699 246.393 47.2534 250.98 47.2534 256.634 cv
47.2534 262.291 42.6699 266.875 37.0146 266.875 cv
37.0146 285.583 li
40.7407 270.854 li
40.7612 270.777 li
47.0244 269.122 51.6436 263.418 51.6436 256.634 cv
51.6436 248.555 45.0933 242.004 37.0146 242.004 cv
cp
.913725 .25098 .105882 rgb
f
31.2017 256.639 mo
31.2017 253.43 33.8037 250.828 37.0146 250.828 cv
37.0146 246.393 li
31.3594 246.393 26.7744 250.98 26.7744 256.634 cv
26.7744 262.291 31.3594 266.875 37.0146 266.875 cv
37.0146 262.45 li
33.8037 262.45 31.2017 259.849 31.2017 256.639 cv
cp
f
37.0146 246.393 mo
37.0146 250.828 li
40.2236 250.828 42.8257 253.43 42.8257 256.639 cv
42.8257 259.849 40.2236 262.45 37.0146 262.45 cv
37.0146 266.875 li
42.6699 266.875 47.2534 262.291 47.2534 256.634 cv
47.2534 250.98 42.6699 246.393 37.0146 246.393 cv
cp
.945098 .415686 .301961 rgb
f
91.1382 256.635 mo
91.1382 250.979 95.7236 246.394 101.378 246.394 cv
101.378 242.005 li
93.2988 242.005 86.7495 248.557 86.7495 256.635 cv
86.7495 263.419 91.3682 269.123 97.6318 270.777 cv
97.6528 270.856 li
101.378 285.582 li
101.378 266.875 li
95.7236 266.875 91.1382 262.289 91.1382 256.635 cv
cp
.545098 .701961 .184314 rgb
f
101.378 242.005 mo
101.378 246.394 li
107.033 246.394 111.619 250.979 111.619 256.635 cv
111.619 262.289 107.033 266.875 101.378 266.875 cv
101.378 285.582 li
105.104 270.856 li
105.126 270.777 li
111.39 269.123 116.009 263.419 116.009 256.635 cv
116.009 248.557 109.459 242.005 101.378 242.005 cv
cp
.407843 .52549 .137255 rgb
f
95.5664 256.64 mo
95.5664 253.43 98.1694 250.827 101.378 250.827 cv
101.378 246.394 li
95.7236 246.394 91.1382 250.979 91.1382 256.635 cv
91.1382 262.289 95.7236 266.875 101.378 266.875 cv
101.378 262.45 li
98.1694 262.45 95.5664 259.849 95.5664 256.64 cv
cp
f
101.378 246.394 mo
101.378 250.827 li
104.588 250.827 107.19 253.43 107.19 256.64 cv
107.19 259.849 104.588 262.45 101.378 262.45 cv
101.378 266.875 li
107.033 266.875 111.619 262.289 111.619 256.635 cv
111.619 250.979 107.033 246.394 101.378 246.394 cv
cp
.545098 .701961 .184314 rgb
f
154.67 256.635 mo
154.67 250.979 159.255 246.394 164.91 246.394 cv
164.91 242.005 li
156.831 242.005 150.281 248.555 150.281 256.635 cv
150.281 263.419 154.9 269.124 161.164 270.778 cv
161.184 270.856 li
164.91 285.582 li
164.91 266.875 li
159.255 266.875 154.67 262.289 154.67 256.635 cv
cp
.984314 .690196 .25098 rgb
f
164.91 242.005 mo
164.91 246.394 li
170.566 246.394 175.152 250.979 175.152 256.635 cv
175.152 262.289 170.566 266.875 164.91 266.875 cv
164.91 285.582 li
168.636 270.856 li
168.658 270.778 li
174.92 269.123 179.539 263.419 179.539 256.635 cv
179.539 248.555 172.991 242.005 164.91 242.005 cv
cp
.94902 .541176 .0745098 rgb
f
159.098 256.638 mo
159.098 253.429 161.701 250.828 164.91 250.828 cv
164.91 246.394 li
159.255 246.394 154.67 250.979 154.67 256.635 cv
154.67 262.289 159.255 266.875 164.91 266.875 cv
164.91 262.451 li
161.701 262.451 159.098 259.849 159.098 256.638 cv
cp
f
164.91 246.394 mo
164.91 250.828 li
168.119 250.828 170.721 253.429 170.721 256.638 cv
170.721 259.849 168.119 262.451 164.91 262.451 cv
164.91 266.875 li
170.566 266.875 175.152 262.289 175.152 256.635 cv
175.152 250.979 170.566 246.394 164.91 246.394 cv
cp
.984314 .690196 .25098 rgb
f
224.488 256.634 mo
224.488 250.977 229.073 246.394 234.729 246.394 cv
234.729 242.005 li
226.649 242.005 220.1 248.554 220.1 256.634 cv
220.1 263.421 224.719 269.124 230.981 270.776 cv
231.003 270.856 li
234.729 285.581 li
234.729 266.874 li
229.073 266.874 224.488 262.288 224.488 256.634 cv
cp
.92549 0 .54902 rgb
f
234.729 242.005 mo
234.729 246.394 li
240.383 246.394 244.97 250.977 244.97 256.634 cv
244.97 262.288 240.383 266.874 234.729 266.874 cv
234.729 285.581 li
238.455 270.856 li
238.476 270.776 li
244.739 269.122 249.359 263.421 249.359 256.634 cv
249.359 248.554 242.809 242.005 234.729 242.005 cv
cp
.627451 .0627451 .396078 rgb
f
228.915 256.638 mo
228.915 253.431 231.518 250.827 234.729 250.827 cv
234.729 246.394 li
229.073 246.394 224.488 250.977 224.488 256.634 cv
224.488 262.288 229.073 266.874 234.729 266.874 cv
234.729 262.45 li
231.518 262.45 228.915 259.849 228.915 256.638 cv
cp
f
234.729 246.394 mo
234.729 250.827 li
237.938 250.827 240.541 253.431 240.541 256.638 cv
240.541 259.849 237.938 262.45 234.729 262.45 cv
234.729 266.874 li
240.383 266.874 244.97 262.288 244.97 256.634 cv
244.97 250.977 240.383 246.394 234.729 246.394 cv
cp
.92549 0 .54902 rgb
f
288.749 256.634 mo
288.749 250.98 293.336 246.393 298.991 246.393 cv
298.991 242.004 li
290.911 242.004 284.359 248.555 284.359 256.634 cv
284.359 263.418 288.977 269.122 295.243 270.777 cv
295.265 270.854 li
298.991 285.583 li
298.991 266.875 li
293.336 266.875 288.749 262.291 288.749 256.634 cv
cp
.152941 .666667 .882353 rgb
f
298.991 242.004 mo
298.991 246.393 li
304.645 246.393 309.229 250.98 309.229 256.634 cv
309.229 262.291 304.645 266.875 298.991 266.875 cv
298.991 285.583 li
302.716 270.854 li
302.737 270.777 li
309.002 269.122 313.62 263.418 313.62 256.634 cv
313.62 248.555 307.069 242.004 298.991 242.004 cv
cp
.109804 .458824 .737255 rgb
f
293.178 256.639 mo
293.178 253.43 295.78 250.828 298.991 250.828 cv
298.991 246.393 li
293.336 246.393 288.749 250.98 288.749 256.634 cv
288.749 262.291 293.336 266.875 298.991 266.875 cv
298.991 262.45 li
295.78 262.45 293.178 259.849 293.178 256.639 cv
cp
f
298.991 246.393 mo
298.991 250.828 li
302.199 250.828 304.802 253.43 304.802 256.639 cv
304.802 259.849 302.199 262.45 298.991 262.45 cv
298.991 266.875 li
304.645 266.875 309.229 262.291 309.229 256.634 cv
309.229 250.98 304.645 246.393 298.991 246.393 cv
cp
.152941 .666667 .882353 rgb
f
360.981 308.435 mo
352.706 326.11 li
344.431 343.786 li
360.981 334.093 li
360.981 308.435 li
cp
.984314 .690196 .25098 rgb
f
377.532 343.786 mo
369.257 326.11 li
360.981 308.435 li
360.981 334.093 li
377.532 343.786 li
cp
.94902 .541176 .0745098 rgb
f
288.748 385.502 mo
288.748 379.847 293.334 375.26 298.989 375.26 cv
298.989 370.871 li
290.91 370.871 284.36 377.423 284.36 385.502 cv
284.36 392.286 288.978 397.989 295.242 399.645 cv
295.264 399.725 li
298.989 414.448 li
298.989 395.74 li
293.334 395.74 288.748 391.158 288.748 385.502 cv
cp
.152941 .666667 .882353 rgb
f
298.989 370.871 mo
298.989 375.26 li
304.645 375.26 309.229 379.847 309.229 385.502 cv
309.229 391.158 304.645 395.74 298.989 395.74 cv
298.989 414.448 li
302.716 399.725 li
302.735 399.645 li
309 397.989 313.619 392.286 313.619 385.502 cv
313.619 377.423 307.068 370.871 298.989 370.871 cv
cp
.109804 .458824 .737255 rgb
f
288.748 385.502 mo
288.748 391.158 293.334 395.74 298.989 395.74 cv
298.989 375.26 li
293.334 375.26 288.748 379.847 288.748 385.502 cv
cp
.964706 .964706 .964706 rgb
f
309.229 385.502 mo
309.229 379.847 304.645 375.26 298.989 375.26 cv
298.989 395.74 li
304.645 395.74 309.229 391.158 309.229 385.502 cv
cp
.890196 .890196 .890196 rgb
f
303.131 391.666 mo
303.131 390.214 li
298.999 390.214 li
298.999 391.666 li
303.131 391.666 li
cp
.109804 .458824 .737255 rgb
f
294.866 391.666 mo
298.999 391.666 li
298.999 390.214 li
294.866 390.214 li
294.866 391.666 li
cp
.152941 .666667 .882353 rgb
f
304.161 381.478 mo
304.161 381.192 li
304.161 381.015 304.068 380.865 303.94 380.767 cv
303.936 380.764 303.934 380.758 303.934 380.757 cv
302.71 379.675 li
302.592 379.572 302.416 379.584 302.315 379.699 cv
302.215 379.815 302.222 379.992 302.34 380.094 cv
303.194 380.85 li
303.116 380.943 303.06 381.06 303.06 381.192 cv
303.06 381.597 li
303.06 381.881 303.282 382.106 303.559 382.135 cv
303.559 388.275 li
302.843 388.275 li
302.843 386.182 li
302.843 386.015 302.709 385.88 302.539 385.88 cv
301.91 385.88 li
301.91 378.253 li
298.999 378.253 li
298.999 378.923 li
301.245 378.923 li
301.245 382.145 li
298.999 382.145 li
298.999 389.531 li
301.91 389.531 li
301.91 386.484 li
302.238 386.484 li
302.238 388.575 li
302.238 388.744 302.372 388.879 302.539 388.879 cv
303.862 388.879 li
304.027 388.879 304.162 388.744 304.162 388.575 cv
304.162 381.492 li
304.162 381.488 304.161 381.48 304.161 381.478 cv
cp
.109804 .458824 .737255 rgb
f
296.789 382.145 mo
296.789 378.923 li
298.999 378.923 li
298.999 378.253 li
296.156 378.253 li
296.156 389.531 li
298.999 389.531 li
298.999 382.145 li
296.789 382.145 li
cp
.152941 .666667 .882353 rgb
f
91.1392 385.502 mo
91.1392 379.846 95.7236 375.261 101.378 375.261 cv
101.378 370.871 li
93.2998 370.871 86.7505 377.421 86.7505 385.502 cv
86.7505 392.286 91.3691 397.991 97.6333 399.645 cv
97.6538 399.723 li
101.378 414.448 li
101.378 395.742 li
95.7236 395.742 91.1392 391.156 91.1392 385.502 cv
cp
.545098 .701961 .184314 rgb
f
101.378 370.871 mo
101.378 375.261 li
107.035 375.261 111.62 379.846 111.62 385.502 cv
111.62 391.156 107.035 395.742 101.378 395.742 cv
101.378 414.448 li
105.106 399.723 li
105.126 399.645 li
111.391 397.99 116.008 392.286 116.008 385.502 cv
116.008 377.421 109.46 370.871 101.378 370.871 cv
cp
.407843 .52549 .137255 rgb
f
91.1392 385.502 mo
91.1392 391.156 95.7236 395.742 101.378 395.742 cv
101.378 375.261 li
95.7236 375.261 91.1392 379.846 91.1392 385.502 cv
cp
.964706 .964706 .964706 rgb
f
111.62 385.502 mo
111.62 379.846 107.035 375.261 101.378 375.261 cv
101.378 395.742 li
107.035 395.742 111.62 391.156 111.62 385.502 cv
cp
.890196 .890196 .890196 rgb
f
103.811 387.467 mo
105.094 387.467 li
102.724 383.359 li
104.066 383.359 li
101.381 378.709 li
101.381 391.676 li
106.242 391.676 li
103.811 387.467 li
cp
.407843 .52549 .137255 rgb
f
98.6948 383.359 mo
100.038 383.359 li
97.6665 387.467 li
98.9492 387.467 li
96.5195 391.676 li
101.381 391.676 li
101.381 378.709 li
98.6948 383.359 li
cp
.545098 .701961 .184314 rgb
f
290.82 462.446 mo
289.531 462.446 288.486 461.404 288.486 460.109 cv
288.486 444.775 li
288.486 443.482 289.531 442.44 290.82 442.44 cv
298.99 442.44 li
298.99 438.512 li
287.615 438.512 li
285.818 438.512 284.359 439.967 284.359 441.765 cv
284.359 463.121 li
284.359 464.92 285.818 466.375 287.615 466.375 cv
294.256 466.375 li
296.172 472.725 li
298.99 482.067 li
298.99 462.446 li
290.82 462.446 li
cp
.152941 .666667 .882353 rgb
f
310.365 438.512 mo
298.99 438.512 li
298.99 442.44 li
307.16 442.44 li
308.451 442.44 309.496 443.482 309.496 444.775 cv
309.496 460.109 li
309.496 461.404 308.451 462.446 307.16 462.446 cv
298.99 462.446 li
298.99 482.067 li
301.81 472.725 li
303.727 466.375 li
310.365 466.375 li
312.162 466.375 313.619 464.92 313.619 463.121 cv
313.619 441.765 li
313.619 439.967 312.162 438.512 310.365 438.512 cv
cp
.109804 .458824 .737255 rgb
f
307.16 462.446 mo
308.451 462.446 309.496 461.404 309.496 460.109 cv
309.496 444.775 li
309.496 443.482 308.451 442.44 307.16 442.44 cv
298.99 442.44 li
298.99 462.446 li
307.16 462.446 li
cp
.890196 .890196 .890196 rgb
f
288.486 444.775 mo
288.486 460.109 li
288.486 461.404 289.531 462.446 290.82 462.446 cv
298.99 462.446 li
298.99 442.44 li
290.82 442.44 li
289.531 442.44 288.486 443.482 288.486 444.775 cv
cp
.964706 .964706 .964706 rgb
f
303.73 456.223 mo
303.379 455.673 302.922 455.13 302.56 454.769 cv
302.027 454.242 301.09 453.315 300.129 452.369 cv
300.129 452.369 299.986 452.23 299.756 452.001 cv
306.207 448.452 li
305.445 447.906 li
297.471 449.746 li
297.314 449.592 297.15 449.431 296.992 449.271 cv
296.035 448.327 295.098 447.397 294.56 446.872 cv
293.764 446.08 291.996 444.811 291.502 445.314 cv
304.103 457.918 li
304.105 457.914 li
304.156 457.814 li
306.853 456.392 li
306.027 455.919 li
303.73 456.223 li
cp
.109804 .458824 .737255 rgb
f
293.096 448.361 mo
293.629 448.886 294.57 449.819 295.525 450.759 cv
295.684 450.915 295.844 451.078 296.002 451.232 cv
294.268 459.226 li
294.824 459.983 li
298.285 453.486 li
298.523 453.714 298.664 453.854 298.664 453.854 cv
299.619 454.802 300.559 455.731 301.09 456.259 cv
301.457 456.611 302.01 457.064 302.559 457.406 cv
302.283 459.709 li
302.768 460.525 li
304.103 457.918 li
291.502 445.314 li
291.002 445.823 292.295 447.566 293.096 448.361 cv
cp
.152941 .666667 .882353 rgb
f
26.7734 385.5 mo
26.7734 379.846 31.3589 375.26 37.0137 375.26 cv
37.0137 370.87 li
28.9346 370.87 22.3853 377.42 22.3853 385.5 cv
22.3853 392.285 27.0044 397.99 33.2676 399.644 cv
33.2886 399.724 li
37.0137 414.448 li
37.0137 395.74 li
31.3589 395.74 26.7734 391.157 26.7734 385.5 cv
cp
.945098 .415686 .301961 rgb
f
37.0137 370.87 mo
37.0137 375.26 li
42.6694 375.26 47.2544 379.846 47.2544 385.5 cv
47.2544 391.157 42.6694 395.74 37.0137 395.74 cv
37.0137 414.448 li
40.7402 399.724 li
40.7607 399.644 li
47.0244 397.989 51.6436 392.285 51.6436 385.5 cv
51.6436 377.42 45.0947 370.87 37.0137 370.87 cv
cp
.913725 .25098 .105882 rgb
f
26.7734 385.5 mo
26.7734 391.157 31.3589 395.74 37.0137 395.74 cv
37.0137 375.26 li
31.3589 375.26 26.7734 379.846 26.7734 385.5 cv
cp
.964706 .964706 .964706 rgb
f
47.2544 385.5 mo
47.2544 379.846 42.6694 375.26 37.0137 375.26 cv
37.0137 395.74 li
42.6694 395.74 47.2544 391.157 47.2544 385.5 cv
cp
.890196 .890196 .890196 rgb
f
33.9766 385.023 mo
33.5874 385.638 33.0205 385.978 32.7129 385.782 cv
32.4072 385.586 32.4746 384.93 32.8647 384.317 cv
33.2573 383.702 33.8232 383.365 34.1289 383.56 cv
34.4365 383.757 34.3682 384.413 33.9766 385.023 cv
cp
34.7554 382.737 mo
31.9912 382.699 31.1226 384.876 31.4941 387.477 cv
31.8262 389.783 34.0254 392.252 35.6567 392.252 cv
35.9883 392.252 36.4478 392.012 37.0142 392.012 cv
37.0327 392.012 37.0454 392.013 37.0635 392.013 cv
37.0635 383.105 li
36.1055 383.125 35.7827 382.752 34.7554 382.737 cv
cp
.945098 .415686 .301961 rgb
f
40.0659 382.735 mo
38.6514 382.384 38.2871 383.082 37.0635 383.105 cv
37.0635 392.013 li
37.6025 392.022 37.5869 392.157 38.2603 392.242 cv
39.8818 392.445 42.1294 390.085 42.5439 387.39 cv
42.8159 385.61 42.3745 383.308 40.0659 382.735 cv
cp
.913725 .25098 .105882 rgb
f
39.6655 378.541 mo
40.8555 377.835 40.9243 376.696 40.9243 376.696 cv
40.7368 376.879 40.1436 377.123 38.6157 377.411 cv
35.2065 378.046 36.7959 382.168 36.7959 382.168 cv
36.7959 382.168 37.6938 379.711 39.6655 378.541 cv
cp
.545098 .701961 .184314 rgb
f
40.9243 376.696 mo
40.9243 376.696 40.8555 377.835 39.6655 378.541 cv
37.6938 379.711 36.7959 382.168 36.7959 382.168 cv
42.3511 381.793 41.3687 377.903 40.9243 376.696 cv
cp
.407843 .52549 .137255 rgb
f
154.668 385.5 mo
154.668 379.846 159.254 375.261 164.91 375.261 cv
164.91 370.871 li
156.829 370.871 150.281 377.422 150.281 385.5 cv
150.281 392.286 154.899 397.989 161.164 399.644 cv
161.185 399.725 li
164.91 414.448 li
164.91 395.74 li
159.254 395.74 154.668 391.156 154.668 385.5 cv
cp
.984314 .690196 .25098 rgb
f
164.91 370.871 mo
164.91 375.261 li
170.565 375.261 175.152 379.846 175.152 385.5 cv
175.152 391.156 170.565 395.74 164.91 395.74 cv
164.91 414.448 li
168.636 399.725 li
168.657 399.644 li
174.923 397.988 179.538 392.286 179.538 385.5 cv
179.538 377.422 172.989 370.871 164.91 370.871 cv
cp
.94902 .541176 .0745098 rgb
f
154.668 385.5 mo
154.668 391.156 159.254 395.74 164.91 395.74 cv
164.91 375.261 li
159.254 375.261 154.668 379.846 154.668 385.5 cv
cp
.964706 .964706 .964706 rgb
f
175.152 385.5 mo
175.152 379.846 170.565 375.261 164.91 375.261 cv
164.91 395.74 li
170.565 395.74 175.152 391.156 175.152 385.5 cv
cp
.890196 .890196 .890196 rgb
f
170.55 384.594 mo
168.835 382.702 li
168.82 379.285 li
167.274 379.29 li
167.283 380.988 li
164.883 378.338 li
164.883 380.853 li
164.888 380.852 164.89 380.851 164.894 380.851 cv
165.467 380.85 165.934 381.311 165.936 381.885 cv
165.939 382.459 165.477 382.926 164.901 382.928 cv
164.895 382.928 164.89 382.925 164.883 382.925 cv
164.883 386.383 li
164.895 386.383 164.904 386.378 164.917 386.378 cv
165.81 386.373 166.537 387.095 166.542 387.986 cv
166.558 391.781 li
166.558 391.798 li
169.574 391.785 li
169.542 384.598 li
170.55 384.594 li
cp
.94902 .541176 .0745098 rgb
f
163.858 381.894 mo
163.856 381.321 164.314 380.862 164.883 380.853 cv
164.883 378.338 li
159.271 384.64 li
160.276 384.637 li
160.308 391.825 li
163.321 391.81 li
163.322 391.797 li
163.308 388.001 li
163.305 387.12 164.006 386.402 164.883 386.383 cv
164.883 382.925 li
164.319 382.917 163.86 382.461 163.858 381.894 cv
cp
.984314 .690196 .25098 rgb
f
249.359 319.383 mo
249.359 311.299 242.81 304.751 234.73 304.751 cv
234.73 311.504 li
239.081 311.504 242.607 315.03 242.607 319.383 cv
242.607 323.732 239.081 327.26 234.73 327.26 cv
234.73 334.009 li
234.73 347.47 li
234.73 347.47 241.633 336.432 244.236 332.715 cv
250.02 324.457 249.359 319.383 249.359 319.383 cv
cp
.627451 .0627451 .396078 rgb
f
234.73 311.504 mo
234.73 304.751 li
226.65 304.751 220.099 311.299 220.099 319.383 cv
220.099 319.383 219.438 324.457 225.222 332.715 cv
227.826 336.432 234.73 347.47 234.73 347.47 cv
234.73 334.009 li
234.73 327.26 li
230.378 327.26 226.852 323.732 226.852 319.383 cv
226.852 315.03 230.378 311.504 234.73 311.504 cv
cp
.92549 0 .54902 rgb
f
224.065 319.641 mo
224.065 325.528 228.841 330.304 234.729 330.304 cv
234.729 308.979 li
228.841 308.979 224.065 313.752 224.065 319.641 cv
cp
.964706 .964706 .964706 rgb
f
234.729 308.979 mo
234.729 330.304 li
240.617 330.304 245.392 325.528 245.392 319.641 cv
245.392 313.752 240.617 308.979 234.729 308.979 cv
cp
.890196 .890196 .890196 rgb
f
228.809 325.303 mo
234.73 325.303 li
234.73 319.026 li
231.459 319.026 228.809 321.834 228.809 325.303 cv
cp
.92549 0 .54902 rgb
f
234.73 319.026 mo
234.73 325.303 li
240.651 325.303 li
240.651 321.834 238.001 319.026 234.73 319.026 cv
cp
.627451 .0627451 .396078 rgb
f
237.801 315.353 mo
237.801 313.658 236.427 312.284 234.73 312.284 cv
234.73 318.424 li
236.427 318.424 237.801 317.052 237.801 315.353 cv
cp
f
231.659 315.353 mo
231.659 317.052 233.034 318.424 234.73 318.424 cv
234.73 312.284 li
233.034 312.284 231.659 313.658 231.659 315.353 cv
cp
.92549 0 .54902 rgb
f
224.489 385.501 mo
224.489 379.845 229.072 375.259 234.729 375.259 cv
234.729 370.87 li
226.649 370.87 220.101 377.421 220.101 385.501 cv
220.101 392.284 224.719 397.988 230.981 399.644 cv
231.001 399.723 li
234.729 414.448 li
234.729 395.74 li
229.072 395.74 224.489 391.154 224.489 385.501 cv
cp
f
234.729 370.87 mo
234.729 375.259 li
240.385 375.259 244.969 379.845 244.969 385.501 cv
244.969 391.154 240.385 395.74 234.729 395.74 cv
234.729 414.448 li
238.456 399.723 li
238.475 399.644 li
244.738 397.987 249.358 392.284 249.358 385.501 cv
249.358 377.421 242.808 370.87 234.729 370.87 cv
cp
.627451 .0627451 .396078 rgb
f
224.489 385.501 mo
224.489 391.154 229.072 395.74 234.729 395.74 cv
234.729 375.259 li
229.072 375.259 224.489 379.845 224.489 385.501 cv
cp
.964706 .964706 .964706 rgb
f
244.969 385.501 mo
244.969 379.845 240.385 375.259 234.729 375.259 cv
234.729 395.74 li
240.385 395.74 244.969 391.154 244.969 385.501 cv
cp
.890196 .890196 .890196 rgb
f
234.857 381.684 mo
235.824 381.684 236.432 382.036 236.692 382.188 cv
237.35 382.567 li
237.625 381.833 li
238.055 380.69 li
238.262 380.136 li
237.765 379.839 li
237.196 379.503 236.573 379.289 235.874 379.196 cv
235.874 378.153 li
235.874 377.463 li
235.216 377.463 li
234.729 377.463 li
234.729 381.697 li
234.773 381.696 234.811 381.684 234.857 381.684 cv
cp
.627451 .0627451 .396078 rgb
f
234.294 388.754 mo
233.563 388.754 232.776 388.517 232.191 388.118 cv
231.5 387.652 li
231.213 388.461 li
230.802 389.618 li
230.624 390.123 li
231.046 390.427 li
231.622 390.844 232.492 391.15 233.378 391.265 cv
233.378 392.371 li
233.378 393.061 li
234.037 393.061 li
234.729 393.061 li
234.729 388.704 li
234.586 388.735 234.44 388.754 234.294 388.754 cv
cp
.92549 0 .54902 rgb
f
233.705 382.48 mo
233.705 382.017 234.09 381.733 234.729 381.697 cv
234.729 377.463 li
234.156 377.463 li
233.498 377.463 li
233.498 378.153 li
233.498 379.347 li
231.912 379.815 230.915 381.079 230.915 382.692 cv
230.915 384.766 232.559 385.693 234.162 386.334 cv
234.385 386.426 234.566 386.514 234.729 386.6 cv
234.729 383.506 li
233.801 383.048 233.705 382.783 233.705 382.48 cv
cp
f
235.404 383.811 mo
235.135 383.699 234.92 383.6 234.729 383.506 cv
234.729 386.6 li
235.529 387.03 235.667 387.402 235.667 387.747 cv
235.667 388.293 235.242 388.599 234.729 388.704 cv
234.729 393.061 li
235.113 393.061 li
235.771 393.061 li
235.771 392.371 li
235.771 391.124 li
237.411 390.636 238.475 389.288 238.475 387.628 cv
238.475 385.37 236.835 384.404 235.404 383.811 cv
cp
.627451 .0627451 .396078 rgb
f
93.2095 462.447 mo
91.9199 462.447 90.8735 461.402 90.8735 460.11 cv
90.8735 444.775 li
90.8735 443.483 91.9199 442.44 93.2095 442.44 cv
101.379 442.44 li
101.379 438.511 li
90.0034 438.511 li
88.207 438.511 86.75 439.966 86.75 441.764 cv
86.75 463.123 li
86.75 464.918 88.207 466.374 90.0034 466.374 cv
96.644 466.374 li
98.5601 472.725 li
101.379 482.067 li
101.379 462.447 li
93.2095 462.447 li
cp
.545098 .701961 .184314 rgb
f
112.754 438.511 mo
101.379 438.511 li
101.379 442.44 li
109.547 442.44 li
110.839 442.44 111.884 443.483 111.884 444.775 cv
111.884 460.11 li
111.884 461.402 110.839 462.447 109.547 462.447 cv
101.379 462.447 li
101.379 482.067 li
104.198 472.725 li
106.114 466.374 li
112.754 466.374 li
114.552 466.374 116.008 464.918 116.008 463.123 cv
116.008 441.764 li
116.008 439.966 114.552 438.511 112.754 438.511 cv
cp
.407843 .52549 .137255 rgb
f
109.547 462.447 mo
110.839 462.447 111.884 461.402 111.884 460.11 cv
111.884 444.775 li
111.884 443.483 110.839 442.44 109.547 442.44 cv
101.379 442.44 li
101.379 462.447 li
109.547 462.447 li
cp
.890196 .890196 .890196 rgb
f
90.8735 444.775 mo
90.8735 460.11 li
90.8735 461.402 91.9199 462.447 93.2095 462.447 cv
101.379 462.447 li
101.379 442.44 li
93.2095 442.44 li
91.9199 442.44 90.8735 443.483 90.8735 444.775 cv
cp
.964706 .964706 .964706 rgb
f
107.665 457.108 mo
106.262 457.113 105.111 456.055 104.945 454.693 cv
107.096 454.688 li
107.22 454.954 107.482 455.141 107.795 455.141 cv
108.222 455.141 108.57 454.795 108.57 454.368 cv
108.57 453.94 108.222 453.593 107.795 453.593 cv
107.742 453.593 107.697 453.615 107.646 453.624 cv
106.72 451.796 li
107.012 451.69 107.321 451.622 107.649 451.621 cv
109.163 451.616 110.396 452.845 110.4 454.358 cv
110.405 455.871 109.178 457.103 107.665 457.108 cv
cp
104.59 450.064 mo
102.329 453.406 li
102.24 453.382 102.152 453.353 102.053 453.353 cv
101.908 453.353 101.769 453.384 101.646 453.44 cv
98.6465 450.077 li
104.59 450.064 li
cp
107.095 454.047 mo
104.945 454.053 li
105.036 453.252 105.464 452.553 106.095 452.113 cv
107.114 454.022 li
107.107 454.032 107.1 454.037 107.095 454.047 cv
cp
105.813 451.587 mo
104.997 452.13 104.444 453.026 104.349 454.054 cv
103.021 454.06 li
102.984 453.949 102.928 453.854 102.858 453.765 cv
105.159 450.358 li
105.813 451.587 li
cp
98.8906 454.39 mo
98.8936 455.9 97.667 457.138 96.1553 457.141 cv
94.6396 457.144 93.4063 455.917 93.4033 454.404 cv
93.3975 452.891 94.626 451.655 96.1387 451.652 cv
96.3242 451.652 96.5078 451.671 96.6846 451.706 cv
96.0479 453.846 li
95.7783 453.892 95.5664 454.114 95.5664 454.395 cv
95.5664 454.709 95.8223 454.962 96.1338 454.962 cv
96.4473 454.962 96.6992 454.709 96.6992 454.395 cv
96.6992 454.3 96.6709 454.214 96.6289 454.135 cv
97.2832 451.907 li
98.2275 452.34 98.8867 453.284 98.8906 454.39 cv
cp
107.646 451.029 mo
107.223 451.029 106.821 451.117 106.449 451.264 cv
105.512 449.421 li
105.508 449.419 li
105.508 448.393 li
104.871 448.396 li
104.874 449.422 li
98.0078 449.441 li
98.6826 447.152 li
95.8799 447.158 li
95.376 447.159 94.9668 447.572 94.9688 448.076 cv
94.9707 448.767 li
94.9717 449.228 95.3203 449.592 95.7617 449.654 cv
95.8018 449.67 95.8418 449.679 95.8877 449.679 cv
96.3809 449.679 li
96.5557 449.678 96.6992 449.535 96.6992 449.36 cv
96.6992 449.182 96.5547 449.04 96.377 449.041 cv
95.8848 449.041 li
95.7354 449.041 95.6104 448.917 95.6104 448.766 cv
95.6074 448.072 li
95.6064 447.923 95.7314 447.798 95.8828 447.798 cv
97.8467 447.811 li
96.8564 451.138 li
96.624 451.088 96.3848 451.06 96.1367 451.06 cv
94.2969 451.064 92.8027 452.565 92.8076 454.404 cv
92.8125 456.245 94.3154 457.738 96.1553 457.733 cv
97.9961 457.728 99.4883 456.228 99.4834 454.39 cv
99.4805 453.013 98.6436 451.835 97.4541 451.326 cv
97.8135 450.105 li
101.18 453.876 li
101.091 454.029 101.026 454.195 101.026 454.382 cv
101.027 454.95 101.492 455.413 102.059 455.409 cv
102.516 455.409 102.888 455.108 103.022 454.697 cv
104.352 454.693 li
104.52 456.383 105.936 457.71 107.667 457.705 cv
109.508 457.699 110.999 456.196 110.995 454.356 cv
110.988 452.517 109.488 451.023 107.646 451.029 cv
cp
.407843 .52549 .137255 rgb
f
103.57 448.216 mo
106.111 448.209 li
106.282 448.209 106.419 448.071 106.417 447.904 cv
106.417 447.732 106.281 447.598 106.11 447.598 cv
103.568 447.604 li
103.401 447.604 103.265 447.742 103.266 447.91 cv
103.265 448.078 103.402 448.216 103.57 448.216 cv
cp
f
102.149 455.888 mo
101.749 455.888 li
101.749 452.858 li
102.149 452.858 li
102.149 455.888 li
cp
f
102.389 456.209 mo
101.51 456.209 li
101.51 455.888 li
102.389 455.888 li
102.389 456.209 li
cp
f
102.389 453.019 mo
101.51 453.019 li
101.51 452.695 li
102.389 452.695 li
102.389 453.019 li
cp
f
28.8452 462.449 mo
27.5537 462.449 26.5083 461.401 26.5083 460.111 cv
26.5083 444.775 li
26.5083 443.483 27.5537 442.439 28.8452 442.439 cv
37.0132 442.439 li
37.0132 438.513 li
25.6387 438.513 li
23.8423 438.513 22.3848 439.969 22.3848 441.765 cv
22.3848 463.122 li
22.3848 464.92 23.8423 466.376 25.6387 466.376 cv
32.2798 466.376 li
34.1953 472.725 li
37.0132 482.067 li
37.0132 462.449 li
28.8452 462.449 li
cp
.945098 .415686 .301961 rgb
f
48.3901 438.513 mo
37.0132 438.513 li
37.0132 442.439 li
45.1836 442.439 li
46.4731 442.439 47.5205 443.483 47.5205 444.775 cv
47.5205 460.111 li
47.5205 461.401 46.4731 462.449 45.1836 462.449 cv
37.0132 462.449 li
37.0132 482.067 li
39.834 472.725 li
41.7495 466.376 li
48.3901 466.376 li
50.1865 466.376 51.6436 464.92 51.6436 463.122 cv
51.6436 441.765 li
51.6436 439.969 50.1865 438.513 48.3901 438.513 cv
cp
.913725 .25098 .105882 rgb
f
45.1836 462.449 mo
46.4731 462.449 47.5205 461.401 47.5205 460.111 cv
47.5205 444.775 li
47.5205 443.483 46.4731 442.439 45.1836 442.439 cv
37.0132 442.439 li
37.0132 462.449 li
45.1836 462.449 li
cp
.890196 .890196 .890196 rgb
f
26.5083 444.775 mo
26.5083 460.111 li
26.5083 461.401 27.5537 462.449 28.8452 462.449 cv
37.0132 462.449 li
37.0132 442.439 li
28.8452 442.439 li
27.5537 442.439 26.5083 443.483 26.5083 444.775 cv
cp
.964706 .964706 .964706 rgb
f
39.7368 454.942 mo
39.6792 454.959 39.6177 454.97 39.5571 454.97 cv
39.1665 454.97 38.8521 454.656 38.8521 454.265 cv
38.8521 454.049 38.9478 453.861 39.1011 453.734 cv
39.2231 453.629 39.3804 453.563 39.5571 453.563 cv
39.9448 453.563 40.2583 453.876 40.2583 454.265 cv
40.2583 454.591 40.0356 454.861 39.7368 454.942 cv
cp
40.2583 447.509 mo
40.2583 452.015 li
38.1948 452.015 li
37.8599 452.015 li
37.0122 452.015 li
37.0122 456.03 li
39.3745 456.03 li
39.812 456.03 li
39.9731 456.03 40.1226 456 40.2651 455.949 cv
40.7573 455.766 41.1099 455.291 41.1099 454.732 cv
41.1099 447.834 li
41.1099 447.116 40.5288 446.535 39.812 446.535 cv
37.0122 446.535 li
37.0122 447.509 li
40.2583 447.509 li
cp
.913725 .25098 .105882 rgb
f
33.7671 454.265 mo
33.7671 453.876 34.0815 453.563 34.4692 453.563 cv
34.645 453.563 34.8003 453.629 34.9253 453.734 cv
35.0757 453.861 35.1743 454.049 35.1743 454.265 cv
35.1743 454.656 34.8579 454.97 34.4692 454.97 cv
34.4058 454.97 34.3452 454.959 34.2905 454.942 cv
33.9878 454.861 33.7671 454.591 33.7671 454.265 cv
cp
34.6519 456.03 mo
37.0122 456.03 li
37.0122 452.015 li
36.1646 452.015 li
35.8296 452.015 li
33.7671 452.015 li
33.7671 447.509 li
37.0122 447.509 li
37.0122 446.535 li
34.2134 446.535 li
33.4956 446.535 32.9146 447.116 32.9146 447.834 cv
32.9146 454.732 li
32.9146 455.291 33.2651 455.766 33.7593 455.949 cv
33.9019 456 34.0542 456.03 34.2134 456.03 cv
34.6519 456.03 li
cp
.945098 .415686 .301961 rgb
f
37.0122 445.666 mo
36.6401 445.666 36.3354 445.364 36.3354 444.99 cv
36.3354 444.616 36.6401 444.315 37.0122 444.315 cv
37.0122 444.315 li
37.0122 443.676 li
37.0122 443.676 li
36.2876 443.676 35.6978 444.265 35.6978 444.99 cv
35.6978 445.714 36.2876 446.302 37.0122 446.302 cv
37.0122 446.302 li
37.0122 445.666 li
37.0122 445.666 li
cp
f
38.3237 444.99 mo
38.3237 444.265 37.7368 443.676 37.0122 443.676 cv
37.0122 444.315 li
37.3862 444.315 37.6899 444.616 37.6899 444.99 cv
37.6899 445.364 37.3862 445.666 37.0122 445.666 cv
37.0122 446.302 li
37.7368 446.302 38.3237 445.714 38.3237 444.99 cv
cp
.913725 .25098 .105882 rgb
f
33.7593 458.397 mo
34.0845 457.532 li
37.0122 457.532 li
37.0122 456.815 li
34.3579 456.815 li
34.6519 456.03 li
34.2134 456.03 li
34.0542 456.03 33.9019 456 33.7593 455.949 cv
31.6704 459.927 li
33.1821 459.927 li
33.4233 459.291 li
37.0122 459.291 li
37.0122 458.397 li
33.7593 458.397 li
cp
.945098 .415686 .301961 rgb
f
40.2651 455.949 mo
40.1226 456 39.9731 456.03 39.812 456.03 cv
39.3745 456.03 li
39.6675 456.815 li
37.0122 456.815 li
37.0122 457.532 li
39.939 457.532 li
40.2651 458.397 li
37.0122 458.397 li
37.0122 459.291 li
40.6021 459.291 li
40.8403 459.927 li
42.356 459.927 li
40.2651 455.949 li
cp
.913725 .25098 .105882 rgb
f
313.618 319.383 mo
313.618 311.304 307.069 304.751 298.988 304.751 cv
298.988 311.506 li
303.342 311.506 306.867 315.032 306.867 319.383 cv
306.867 323.735 303.342 327.262 298.988 327.262 cv
298.988 334.013 li
298.988 347.47 li
298.988 347.47 305.895 336.433 308.497 332.716 cv
314.281 324.46 313.618 319.383 313.618 319.383 cv
cp
.109804 .458824 .737255 rgb
f
298.988 311.506 mo
298.988 304.751 li
290.913 304.751 284.36 311.304 284.36 319.383 cv
284.36 319.383 283.699 324.46 289.482 332.716 cv
292.085 336.433 298.988 347.47 298.988 347.47 cv
298.988 334.013 li
298.988 327.262 li
294.64 327.262 291.111 323.735 291.111 319.383 cv
291.111 315.032 294.64 311.506 298.988 311.506 cv
cp
.152941 .666667 .882353 rgb
f
288.327 319.644 mo
288.327 325.534 293.099 330.306 298.988 330.306 cv
298.988 308.983 li
293.099 308.983 288.327 313.754 288.327 319.644 cv
cp
.964706 .964706 .964706 rgb
f
298.988 308.983 mo
298.988 330.306 li
304.878 330.306 309.651 325.534 309.651 319.644 cv
309.651 313.754 304.878 308.983 298.988 308.983 cv
cp
.890196 .890196 .890196 rgb
f
294.236 323.366 mo
294.942 323.366 li
296.262 319.492 li
295.453 317.404 li
292.901 319.63 li
291.454 323.366 li
292.531 323.366 li
294.236 323.366 li
cp
.152941 .666667 .882353 rgb
f
295.453 317.404 mo
294.608 315.22 li
293.308 318.577 li
292.901 319.63 li
295.453 317.404 li
cp
1 1 1 rgb
f
307.362 323.366 mo
304.39 316.646 li
301.506 318.647 li
301.379 318.935 li
299.418 323.366 li
307.362 323.366 li
cp
.109804 .458824 .737255 rgb
f
304.39 316.646 mo
303.391 314.39 li
301.867 317.832 li
301.506 318.647 li
304.39 316.646 li
cp
.964706 .964706 .964706 rgb
f
297.055 317.165 mo
296.262 319.492 li
294.942 323.366 li
298.916 323.366 li
298.916 315.384 li
297.055 317.165 li
cp
.152941 .666667 .882353 rgb
f
301.379 318.935 mo
299.861 314.478 li
298.916 315.384 li
298.916 323.366 li
299.418 323.366 li
301.379 318.935 li
cp
.109804 .458824 .737255 rgb
f
299.861 314.478 mo
298.916 311.7 li
298.916 315.384 li
299.861 314.478 li
cp
.964706 .964706 .964706 rgb
f
298.916 311.7 mo
297.055 317.165 li
298.916 315.384 li
298.916 311.7 li
cp
1 1 1 rgb
f
351.892 280.507 mo
347.538 280.507 li
347.538 247.081 li
351.892 247.081 li
351.892 280.507 li
cp
.929412 .929412 .929412 rgb
f
351.892 280.507 mo
349.714 280.507 li
349.714 247.081 li
351.892 247.081 li
351.892 280.507 li
cp
.882353 .882353 .882353 rgb
f
351.892 258.423 mo
351.892 261.331 li
351.892 269.767 li
382.183 262.642 li
364.249 258.423 li
351.892 258.423 li
cp
.913725 .25098 .105882 rgb
f
382.183 254.206 mo
351.892 247.081 li
351.892 255.517 li
351.892 258.423 li
364.249 258.423 li
382.183 254.206 li
cp
.945098 .415686 .301961 rgb
f
156.742 462.447 mo
155.452 462.447 154.406 461.404 154.406 460.11 cv
154.406 444.776 li
154.406 443.482 155.452 442.438 156.742 442.438 cv
164.911 442.438 li
164.911 438.512 li
153.535 438.512 li
151.739 438.512 150.28 439.968 150.28 441.766 cv
150.28 463.121 li
150.28 464.92 151.739 466.376 153.535 466.376 cv
160.176 466.376 li
162.092 472.726 li
164.911 482.067 li
164.911 462.447 li
156.742 462.447 li
cp
.984314 .690196 .25098 rgb
f
176.286 438.512 mo
164.911 438.512 li
164.911 442.438 li
173.079 442.438 li
174.371 442.438 175.415 443.482 175.415 444.776 cv
175.415 460.11 li
175.415 461.404 174.371 462.447 173.079 462.447 cv
164.911 462.447 li
164.911 482.067 li
167.73 472.726 li
169.647 466.376 li
176.286 466.376 li
178.083 466.376 179.539 464.92 179.539 463.121 cv
179.539 441.766 li
179.539 439.968 178.083 438.512 176.286 438.512 cv
cp
.94902 .541176 .0745098 rgb
f
173.079 462.447 mo
174.371 462.447 175.415 461.404 175.415 460.11 cv
175.415 444.776 li
175.415 443.482 174.371 442.438 173.079 442.438 cv
164.911 442.438 li
164.911 462.447 li
173.079 462.447 li
cp
.890196 .890196 .890196 rgb
f
154.406 444.776 mo
154.406 460.11 li
154.406 461.404 155.452 462.447 156.742 462.447 cv
164.911 462.447 li
164.911 442.438 li
156.742 442.438 li
155.452 442.438 154.406 443.482 154.406 444.776 cv
cp
.964706 .964706 .964706 rgb
f
162.879 446.08 mo
162.879 450.6 li
158.359 450.6 li
158.359 454.664 li
162.879 454.664 li
162.879 459.184 li
164.911 459.184 li
164.911 446.08 li
162.879 446.08 li
cp
.984314 .690196 .25098 rgb
f
166.943 450.6 mo
166.943 446.08 li
164.911 446.08 li
164.911 459.184 li
166.943 459.184 li
166.943 454.664 li
171.463 454.664 li
171.463 450.6 li
166.943 450.6 li
cp
.94902 .541176 .0745098 rgb
f
226.561 462.448 mo
225.27 462.448 224.225 461.404 224.225 460.111 cv
224.225 444.776 li
224.225 443.485 225.27 442.439 226.561 442.439 cv
234.73 442.439 li
234.73 438.514 li
223.354 438.514 li
221.557 438.514 220.1 439.969 220.1 441.764 cv
220.1 463.122 li
220.1 464.92 221.557 466.377 223.354 466.377 cv
229.994 466.377 li
231.912 472.725 li
234.73 482.067 li
234.73 462.448 li
226.561 462.448 li
cp
.92549 0 .54902 rgb
f
246.104 438.514 mo
234.73 438.514 li
234.73 442.439 li
242.898 442.439 li
244.189 442.439 245.234 443.485 245.234 444.776 cv
245.234 460.111 li
245.234 461.404 244.189 462.448 242.898 462.448 cv
234.73 462.448 li
234.73 482.067 li
237.549 472.725 li
239.465 466.377 li
246.104 466.377 li
247.901 466.377 249.358 464.92 249.358 463.122 cv
249.358 441.764 li
249.358 439.969 247.901 438.514 246.104 438.514 cv
cp
.627451 .0627451 .396078 rgb
f
242.898 462.448 mo
244.189 462.448 245.234 461.404 245.234 460.111 cv
245.234 444.776 li
245.234 443.485 244.189 442.439 242.898 442.439 cv
234.73 442.439 li
234.73 462.448 li
242.898 462.448 li
cp
.890196 .890196 .890196 rgb
f
224.225 444.776 mo
224.225 460.111 li
224.225 461.404 225.27 462.448 226.561 462.448 cv
234.73 462.448 li
234.73 442.439 li
226.561 442.439 li
225.27 442.439 224.225 443.485 224.225 444.776 cv
cp
.964706 .964706 .964706 rgb
f
240.006 447.277 mo
240.17 446.846 240.301 446.398 240.355 445.925 cv
239.334 445.925 238.238 445.925 237.061 445.925 cv
236.253 445.925 235.474 445.925 234.731 445.925 cv
234.73 445.925 234.73 445.925 234.73 445.925 cv
234.73 447.277 li
240.006 447.277 li
cp
.890196 .890196 .890196 rgb
f
229.455 447.277 mo
234.73 447.277 li
234.73 445.925 li
232.181 445.925 230.129 445.925 229.104 445.925 cv
229.16 446.398 229.291 446.846 229.455 447.277 cv
cp
.964706 .964706 .964706 rgb
f
234.73 447.815 mo
229.455 447.815 li
229.291 447.383 229.16 446.935 229.104 446.462 cv
230.129 446.462 232.181 446.462 234.73 446.462 cv
234.73 445.783 li
231.074 445.783 228.39 445.783 228.39 445.783 cv
228.39 449.139 230.999 451.879 234.301 452.102 cv
234.301 457.129 li
233.165 457.286 232.23 458.061 231.842 459.103 cv
234.73 459.103 li
234.73 447.815 li
cp
.92549 0 .54902 rgb
f
235.165 457.129 mo
235.165 452.102 li
238.463 451.877 241.071 449.137 241.071 445.783 cv
239.873 445.783 238.51 445.783 237.061 445.783 cv
236.254 445.783 235.475 445.783 234.732 445.783 cv
234.731 445.783 234.73 445.783 234.73 445.783 cv
234.73 446.462 li
234.73 446.462 234.73 446.462 234.731 446.462 cv
235.474 446.462 236.253 446.462 237.061 446.462 cv
238.238 446.462 239.334 446.462 240.355 446.462 cv
240.301 446.935 240.17 447.383 240.006 447.815 cv
234.73 447.815 li
234.73 459.103 li
237.619 459.103 li
237.231 458.063 236.298 457.288 235.165 457.129 cv
cp
.627451 .0627451 .396078 rgb
f
373.891 413.546 mo
373.891 414.043 373.47 414.448 372.951 414.448 cv
349.231 414.448 li
348.713 414.448 348.293 414.043 348.293 413.546 cv
348.293 391.863 li
348.293 391.365 348.713 390.962 349.231 390.962 cv
372.951 390.962 li
373.47 390.962 373.891 391.365 373.891 391.863 cv
373.891 413.546 li
cp
.8 .8 .8 rgb
f
373.891 411.18 mo
373.891 411.676 373.47 412.079 372.951 412.079 cv
349.231 412.079 li
348.713 412.079 348.293 411.676 348.293 411.18 cv
348.293 389.565 li
348.293 389.068 348.713 388.665 349.231 388.665 cv
372.951 388.665 li
373.47 388.665 373.891 389.068 373.891 389.565 cv
373.891 411.18 li
cp
.882353 .882353 .882353 rgb
f
373.891 401.597 mo
348.293 401.597 li
348.293 398.8 li
373.891 398.8 li
373.891 401.597 li
cp
.964706 .964706 .964706 rgb
f
354.833 403.877 mo
350.287 403.874 li
348.293 403.872 li
348.293 404.793 li
354.833 404.807 li
355.949 404.808 356.856 405.828 356.854 407.084 cv
356.842 412.079 li
357.677 412.079 li
357.681 407.084 li
357.684 405.317 356.405 403.879 354.833 403.877 cv
cp
f
361.807 412.079 mo
359.21 412.079 li
359.21 388.665 li
361.807 388.665 li
361.807 412.079 li
cp
f
365.627 396.621 mo
362.81 396.621 li
362.81 389.636 li
365.627 389.636 li
365.627 396.621 li
cp
f
367.35 397.028 mo
367.35 394.552 li
373.324 394.552 li
373.324 397.028 li
367.35 397.028 li
cp
f
363.678 400.197 mo
363.678 401.948 362.259 403.366 360.509 403.366 cv
358.757 403.366 357.339 401.948 357.339 400.197 cv
357.339 398.448 358.757 397.028 360.509 397.028 cv
362.259 397.028 363.678 398.448 363.678 400.197 cv
cp
f
353.195 404.82 mo
351.849 404.82 li
351.849 388.665 li
353.195 388.665 li
353.195 404.82 li
cp
f
348.293 406.139 mo
348.293 406.139 352.524 405.821 352.988 407.229 cv
353.448 408.639 354.211 408.873 354.799 409.4 cv
355.386 409.929 355.796 412.079 355.796 412.079 cv
349.231 412.079 li
349.231 412.079 348.56 412.12 348.285 411.376 cv
348.293 406.139 li
cp
.545098 .701961 .184314 rgb
f
372.344 406.856 mo
372.344 408.988 369.962 410.529 367.728 410.529 cv
365.494 410.529 363.112 408.988 363.112 406.856 cv
363.112 404.726 365.661 404.012 367.728 403.164 cv
370.186 402.157 372.344 404.726 372.344 406.856 cv
cp
.152941 .666667 .882353 rgb
f
357.968 393.519 mo
348.293 393.519 li
348.293 392.208 li
357.968 392.208 li
357.968 393.519 li
cp
.964706 .964706 .964706 rgb
f
373.891 392.815 mo
364.216 392.815 li
364.216 391.504 li
373.891 391.504 li
373.891 392.815 li
cp
f
361.807 400.141 mo
361.807 400.727 361.225 401.199 360.509 401.199 cv
359.79 401.199 359.21 400.727 359.21 400.141 cv
359.21 399.556 359.79 399.082 360.509 399.082 cv
361.225 399.082 361.807 399.556 361.807 400.141 cv
cp
.8 .8 .8 rgb
f
351.802 375.761 mo
351.802 370.954 355.701 367.054 360.508 367.054 cv
360.508 363.323 li
353.638 363.323 348.071 368.892 348.071 375.761 cv
348.071 381.528 351.998 386.377 357.323 387.784 cv
357.341 387.851 li
360.508 400.371 li
360.508 384.467 li
355.701 384.467 351.802 380.569 351.802 375.761 cv
cp
.945098 .415686 .301961 rgb
f
360.508 363.323 mo
360.508 367.054 li
365.316 367.054 369.213 370.954 369.213 375.761 cv
369.213 380.569 365.316 384.467 360.508 384.467 cv
360.508 400.371 li
363.676 387.851 li
363.693 387.784 li
369.018 386.377 372.944 381.528 372.944 375.761 cv
372.944 368.892 367.377 363.323 360.508 363.323 cv
cp
.913725 .25098 .105882 rgb
f
355.566 375.765 mo
355.566 373.036 357.778 370.824 360.508 370.824 cv
360.508 367.054 li
355.701 367.054 351.802 370.954 351.802 375.761 cv
351.802 380.569 355.701 384.467 360.508 384.467 cv
360.508 380.705 li
357.778 380.705 355.566 378.494 355.566 375.765 cv
cp
f
360.508 367.054 mo
360.508 370.824 li
363.235 370.824 365.448 373.036 365.448 375.765 cv
365.448 378.494 363.235 380.705 360.508 380.705 cv
360.508 384.467 li
365.316 384.467 369.213 380.569 369.213 375.761 cv
369.213 370.954 365.316 367.054 360.508 367.054 cv
cp
.945098 .415686 .301961 rgb
f
367.826 454.755 mo
360.981 457.551 li
360.981 457.544 li
354.137 454.748 li
347.294 457.544 li
347.294 479.828 li
354.137 477.602 li
360.981 479.828 li
367.826 477.606 li
374.669 479.836 li
374.669 457.551 li
367.826 454.755 li
cp
.384314 .741176 .309804 rgb
f
374.669 479.836 mo
367.826 477.606 li
360.981 479.828 li
354.137 477.602 li
347.294 479.828 li
347.294 457.544 li
354.137 454.748 li
360.981 457.544 li
360.981 457.551 li
367.826 454.755 li
374.669 457.551 li
374.669 479.836 li
cp
375.283 456.05 mo
368.438 453.255 li
367.826 453.003 li
367.213 453.255 li
360.989 455.795 li
354.75 453.248 li
354.137 452.997 li
353.524 453.248 li
346.68 456.042 li
345.671 456.455 li
345.671 457.544 li
345.671 479.828 li
345.671 482.06 li
347.795 481.371 li
354.137 479.307 li
360.48 481.371 li
360.979 481.532 li
361.481 481.371 li
367.824 479.313 li
374.168 481.376 li
376.292 482.067 li
376.292 479.836 li
376.292 457.551 li
376.292 456.462 li
375.283 456.05 li
cp
.929412 .929412 .929412 rgb
f
360.981 479.823 mo
354.137 477.597 li
354.137 454.745 li
360.981 457.541 li
360.981 479.823 li
cp
.623529 .811765 .839216 rgb
f
347.294 479.823 mo
354.137 477.597 li
354.137 454.745 li
347.294 457.541 li
347.294 479.823 li
cp
.705882 .898039 .909804 rgb
f
367.826 454.752 mo
367.826 477.603 li
374.669 479.831 li
374.669 457.547 li
367.826 454.752 li
cp
.623529 .811765 .839216 rgb
f
360.981 479.831 mo
367.826 477.603 li
367.826 454.752 li
360.981 457.547 li
360.981 479.831 li
cp
.705882 .898039 .909804 rgb
f
350.716 478.715 mo
350.716 478.715 349.612 476.988 350.716 476.719 cv
351.819 476.447 352.232 474.116 354.137 474.083 cv
354.137 477.602 li
350.716 478.715 li
cp
.305882 .686275 .741176 rgb
f
358.677 474.083 mo
357.799 474.655 356.368 474.736 355.06 474.314 cv
354.795 474.176 354.492 474.088 354.137 474.083 cv
354.137 477.602 li
357.56 478.715 li
357.563 478.71 li
360.981 479.831 li
360.981 472.867 li
360.981 472.867 359.554 473.51 358.677 474.083 cv
cp
.133333 .607843 .678431 rgb
f
366.903 474.314 mo
365.595 474.736 364.164 474.655 363.286 474.083 cv
362.407 473.51 360.981 472.867 360.981 472.867 cv
360.981 479.831 li
364.398 478.71 li
364.4 478.71 364.402 478.715 364.402 478.715 cv
367.826 477.602 li
367.826 474.083 li
367.471 474.088 367.168 474.176 366.903 474.314 cv
cp
.305882 .686275 .741176 rgb
f
367.826 474.151 mo
367.826 474.151 371.548 475.885 372.179 479.037 cv
367.826 477.602 li
367.826 474.151 li
cp
f
347.294 462.057 mo
347.294 462.057 350.018 462.19 350.716 463.407 cv
351.412 464.623 352.494 465.164 352.494 465.164 cv
352.494 465.164 353.237 467.65 352.494 468.568 cv
351.751 469.488 349.724 470.23 349.252 471.446 cv
348.779 472.664 347.294 473.455 347.294 473.455 cv
347.294 462.057 li
cp
.545098 .701961 .184314 rgb
f
367.826 464.713 mo
360.94 470.029 li
354.117 469.927 li
347.294 474.623 li
347.294 476.595 li
354.117 471.291 li
360.981 471.21 li
368.081 466.334 li
374.669 467.293 li
374.669 465.795 li
367.826 464.713 li
cp
.964706 .964706 .964706 rgb
f
367.826 454.752 mo
360.982 451.731 li
360.981 468.568 li
360.981 468.568 364.746 464.758 364.837 463.679 cv
364.927 462.598 367.256 461.38 367.826 461.021 cv
368.394 460.66 371.548 461.246 372.179 461.021 cv
372.81 460.796 374.669 459.489 374.669 459.489 cv
374.669 457.547 li
367.826 454.752 li
cp
.545098 .701961 .184314 rgb
f
354.852 453.351 mo
353.885 453.351 353.1 452.568 353.1 451.598 cv
353.1 440.092 li
353.1 439.121 353.885 438.337 354.852 438.337 cv
360.982 438.337 li
360.982 435.391 li
352.446 435.391 li
351.099 435.391 350.004 436.483 350.004 437.833 cv
350.004 453.856 li
350.004 455.206 351.099 456.299 352.446 456.299 cv
357.43 456.299 li
358.866 461.063 li
360.982 468.072 li
360.982 453.351 li
354.852 453.351 li
cp
.984314 .690196 .25098 rgb
f
369.517 435.391 mo
360.982 435.391 li
360.982 438.337 li
367.111 438.337 li
368.08 438.337 368.863 439.121 368.863 440.092 cv
368.863 451.598 li
368.863 452.568 368.08 453.351 367.111 453.351 cv
360.982 453.351 li
360.982 468.072 li
363.098 461.063 li
364.535 456.299 li
369.517 456.299 li
370.865 456.299 371.958 455.206 371.958 453.856 cv
371.958 437.833 li
371.958 436.483 370.865 435.391 369.517 435.391 cv
cp
.94902 .541176 .0745098 rgb
f
367.111 453.351 mo
368.08 453.351 368.863 452.568 368.863 451.598 cv
368.863 440.092 li
368.863 439.121 368.08 438.337 367.111 438.337 cv
360.982 438.337 li
360.982 453.351 li
367.111 453.351 li
cp
.890196 .890196 .890196 rgb
f
353.1 440.092 mo
353.1 451.598 li
353.1 452.568 353.885 453.351 354.852 453.351 cv
360.982 453.351 li
360.982 438.337 li
354.852 438.337 li
353.885 438.337 353.1 439.121 353.1 440.092 cv
cp
.964706 .964706 .964706 rgb
f
359.456 441.07 mo
359.456 444.461 li
356.066 444.461 li
356.066 447.511 li
359.456 447.511 li
359.456 450.901 li
360.982 450.901 li
360.982 441.07 li
359.456 441.07 li
cp
.984314 .690196 .25098 rgb
f
362.508 444.461 mo
362.508 441.07 li
360.982 441.07 li
360.982 450.901 li
362.508 450.901 li
362.508 447.511 li
365.897 447.511 li
365.897 444.461 li
362.508 444.461 li
cp
.94902 .541176 .0745098 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.1.0
%%For: (\700\753\745\752\761\745\751 \705\743\756\760\756\742) ()
%%Title: (1405.m00.i103.n030.P.c25.City map with pin pointers.eps)
%%CreationDate: 6/6/2014 2:18 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kl!%*.o'lPP50s-;ESNf%Sp^W=Z4KI"+Q0tA8-22bRDl^X5Q(NS\#Oa;3@Dp7E!Vle\S>%,dp60Z=&i>r\U-9m)7F=?p1_84
%ht;qj=`Y#sj1lbsO8n"KqlI&0mn[aslr8bBH@)mJlW!3KI\G6Wo_RmA_V^W%k%3WgI]6jAe=4_.?^Z;J;E]eJE]`\dWR7f63k\R*
%OR]U\!UV+Xpe;j%Je%9+_>U."(4Zn[K)m(qIFG_':\4FEL`$-#o]`]#R@eoZqs6B[r9M/5mUtE9ftT0=1%=e$AaCbQj0<#'lJ5(9
%12(d`0[P-cK`@@ra%Wae;Ah@t%%iJn"Wmum)=1fYZeIo>T:YTR$'Y?Epj_Y")+];QDp?6#X(Lltpt<gB)2F3X[o^L&/CqT=.CelR
%`?-dD"!D-2O@8LXem$sBAPaa/>)&/^1M`;7s6*fX@uq3Y>RUM3k@N4,hoLOY`aN4KqSq8>'r_.KeGi^u4KDOuocBHAXuA=Rr!t'1
%.Kc]g_>D,^^%\D[(]`;m7j/Pab>,1r">\NfV.PG"Y#.c?o+m+HhJ%B<HJ3'C;%Do[5`YDMfIBu%Y+nITI$!0%]m\OY98K`2D?/1u
%-m'Br(BhG`Pj8F:[]N+toSFUHj.^$*KsM"&]%_"j2VRJ4VLeYc4Kc@nH]=Il?Jim.ln>(V)ea^fnV<kHKF\:[[_U_+NX@GIBjbIY
%*oP]*m964464*;SCVC9\^t`UH:AM*Y$iL98%(i#H!Z\o=^]TQSG5TC1?ErC>UV5e$IXKl8%(eUgPKk9M=j#8Ua7[[2H?IU!JP9jI
%h;dtnAN@(b;`&RJX&Pc'pb(<3.uiufPR`8i?9Q2TKkKX#r-O%qVKj6F.$tXt!J>:!J(C*[Y1Bk2<8+b(]1T8rVXqK5V-W=skQfdb
%\a^>^W;t+@mg>A\>L8on0SpjF2BtR_BV><gC8f;5%#f,<?0f\jg"-hs))+dO#Cj4C43^70,s0U"noIFi#5);L\'<:d%Jse+_bR,/
%(r7-[T9PFa"89s_$mHW<%0/W<DWc^GZe7>*<Ouh&C/Y'<^WV2J4I\s$Wl4S+&YhS4_;\87dPsRM[VH=+IUf8J`&7jM<<gu00JCJ[
%9!;*a1)Eg#-]L$c[@)YU@o-7tlEn.dZt0`m.U<0ebECFSp$3[8!hh7ICMQk8#1HsE*kZn.IbXpiqM4W_Af\V!Ip%4(lSs;F2QF8<
%=*f?lq.V([o\W]U%6purPBr5KiLgYrCD@cMHG.I7S*F.O=mOVmeAB?jg]:n9J&K)+Ij=@Mj-"D+3V2_?\nn!.S,B?ELV1l]a#%L3
%>-%l;c*3U9')kWl_V`s8Jn_#(iibggE0c(ehJTcY3NG)6cNYhs&Ikq%SD;E;BA5+(gTLM.p79O<#Cd`RaIH"8UR$KqCiisiFi[/)
%U=e]eSWG:qn0A0WOk-St8=;=K3>hIM+XCi)ldND^Ssme;g%i#f1nBk;]arM=$=ZE@lQW7_3>aTg2jd?<TA!]RT14#LXflS]b8Tej
%_N$/FHDt!G0a'(&ZdauA^FnNIl'/T2Xki98nhZQLoYr>>brEYd8Vg/$P4c_,7RP(?1Ae7D1'a@YY?HFu@[@c:>s$:tf=jFC)iL@Y
%7&O8X<?Uj'6&KD<gGZ^l*]M'4K!DJ,^//(cVarDYFSSX5OL$\_JVV5@8S2HEg!'X+Mo]eeLq3&<S[4.=rZ.-W8Zr3`@e3Ttd9jh8
%M8UrS]AFO]V8sh9d*OD!%:+X1MpQ>RgAS#X?\EV&hU'QeEhTiMh0pjNWjTNHGMGM$**dK*b740uFlBq95Is#\]$SMSiCB71maTVH
%%skn5@Ya)Qj2^oZXj56,*^%g'9ZN=YFh56Q'Vn^.eR<6L7>iT#dMlOtmN?"W=@U;PiGSha.Q?9Ar4@L`K[]1^O(n5h1qYG%/'YgY
%IucrR)M/DJ]p(5gCO'229j:,0[1jk#+p+WWB!hMZ;:qpnS!>i-]9QR%J]3=W8<ZcOMlM68fgoUGWg.02CPu+&V4(__]3hV21tq!G
%aiGIfeglC40TFtn[Cs"r5`,kk>X(ptOn!VHB'n'o;G/=')AgNgKeSd8UQoSfS\]">\2fks2_cDqOr(Z@pT-+TWJbl8RJ@]=:Qq?O
%($e('F?V*QH<+s5c2!9qQ!qGbW3l0VV)@!cTILR.]>JW0r$L-LPd>#RNPO?20/&i'T$Kge/6dZ>RB[]@##`fgDPs-0)dO6h(UMIE
%DphPEVU*;"&4T(IbVfpj<%gRj3SRIWNU]0@Y)e<0Y;&"PeH]fSOrLo)V@I2:Fc5<Tgk`Ju)LE&`I[r6B=mqp4OdXh3K?LK$lle%U
%OT3Ecj:k*`Aj/GcfL&EMUr=DGm-c*]c,*asbLf@"^D?^df147uhtUgO)rn)@,t2QkZ#@;-2dYhi0D:BD5a$AsD`iYla^X.P[V`h;
%F?/T-+Z8d,-T"r+i[pEE`&.>+FX^_#EH3g.F7eq@fXX#q'2O`Pjg$CYg(<AQe&Wm0`6>:<bZjSdqoB!R!2PGb,-A%#c&cC?)YQoK
%n4QDT[!Bf:C"AT&7>>XP1Lt=DhDjoQlg5-`%-ecCpGPc.)a>:4Appo2X4K6j]h3Y<7`lot2A<'r<%c]FJ!NXZ,(K;JLg&lcDFFKJ
%?0'=D_HHG-lqQ$"n1A3`6Yh$c\eV$6WUdenCRFB>/(sK^dko#JKnJK/QWC6f:.-K]/G#_<7]JWHQZJZM_H0B\KATn'UR9#jd6A2N
%?dkTK$Gs;b?6C7(Iq5E&a0FJ"D\jVl$PB<Y=X7;hM3m*9*atLk-!kg3L@R!U`60@pZ:MVZ&hf0]9:W@Xi['GE7H.m@G_rUqo<;H3
%80Il^"O[;]G]%U-Bg-Sh(SY[,;_<':A]<X[mS$c8An+*p%%\\"OQKGl=hh"HhX1oHLW_0q>kB`9QW9iD_r@tZCEb<Xam*>Tr'qRD
%`D'+6[5t1/=r%M+N6j9E$fg4^V\reX0,W@AlP@O1\DMad[<6JAe)CS0lVc1hEt2OHRZ<2,J'"`Q:G6uf7Ec3fafG*fG!1<%QcC`Y
%_Ag<r%t8U?G#]C9"QihQ?b@9#jk#7_j'n%<[.h#=""XV>k46rYq8q.3agDp6?B)P+p>R!m5RR>:dWed"CNQU<-R\lh!(G88f2D$P
%hAEj_-O1F8kZJhE[s!b&0@R8.29ONb]QP[M1YZO-UtP"^=P<9AEO/P+hoIKJVd$,Y#(Nfqfi0KJhs$0@Y]eWpG:BT!Di@7\8^C,!
%7O;$H)``i=HJqPuA[B*kp<P4rc<l:+T/2C?]'GePs2(n#CQZkKB;lB(gt3k*M_"a<e7LA:oXc!AdGdd5J'jO1hOGXQRYSA\R!&h5
%?(@4l"<of)\t+-@k2u7hfUR2.F*le>$G(-IFZUDL:[$\\h9NYo715`$i=epOA9!3KAt=[q$1aM0GqVpSc_)RdS0/nHa5R6tih5)d
%"SilQ('is(T!60?o#9TJ$V"s`(WXJqnsNYt(C/"tlf'J7p&DV2nKqk0J#r]']f!Q"_-ZIRq5d0MpT1MV7ioD[M]8W--bW,p:hdZ/
%1suLSm('*A+hPK)Oq*8\j'f:N:342INUcDjSV'4<:`[$I'03p]m1()[<:<Y>[(\0Pk3M^4=X1m<h/T8u0D4TpL7kGY::Z@k^G]F[
%76o3@[W]Kar(Nr:HK/dI8uC=%fs]tD$?VWo?@s2*_k4fpr<[$k2pm;J)2%sUoLVBH;bS:^9J4`^-EP-E`SmV&="brG[FmGOF*b95
%^0HK5*>u1HM:UhJP)S4B53r+CZ;9)IE%+,2MqjV<S[8>#?S[1H?.:EID!#E:>eo*cq3a!^V00O^VZ2>h-.d#F;B39[0a?TGG&HGZ
%Jsf>S=D-Sh?ggC/Io>a#)SLDgq>@+Dod4P`%k>V6fPi(@P?'#!)Oq(^Rl47_Bmn7WUblmhpMZiFR3s<(qACM6mqVQ<Tk;oYB'0"1
%Zi%3HLJWeZ7tM7uQ$30Qbo7L3;!3rJQ=QUD+73O?kKLt-F-lp:n8YErlJnKJ$^JBdRa'`"$#X4*F&<<j;g,fl>)D?Z_I0NQSj]c9
%0n'$^(l,m!"^_S"_ASm>HSQ@THV)&L3NW.\c;P4%Xt+t%=8[*TR8p_a\!9FO]obak18F.OWg.5Am.]eIcHd1/+-sEV^AZ,FfUQsC
%4m@)mBdfZef4XL*.>1Tu<emecZ]ZYIN&87$Z7=,6.Y!MK=j^5p;!Ff]Q<DDs+t8L'e3t]RImlb!QWgcpp!#$PKi?Vqit?O<O,@8W
%gT73M5-NINNBq'U?&T%[2SC`CRZ2L(P2Zi!C8G']fgujdCJD!jW(+C"5A@K'?0DZ*X]G_G1pmg>gZp'.9jn$;WJINn19N8N<,"9p
%WKs16Q\`3:#IRH`%C7,Qbiq%'^V%:$OZK&9.$Qd#n:fQja(OX8hu7G=(40c(j5MSuD:ZM/g"Wn(O(00+3&bm.0=dQ0r[lDR/`thQ
%3p0BD1@m]m;QsO`k8&,Vr1([(j;Vp<Gm<"UFBpp$`n`->0:HAAG,oNgOnL94`\:-@>Vs)G>&'$'.FTdQ=K]%mUXSP#FdelM'`0Wn
%bBN'6cWaMcH*_lI7(TUM$d1JiQ>b#'mS6iL1`'A$j1Q5mLe(IaE1Ng5:)Y>UC=H.pl%um=D.:fUl!=?9)dX=@bWc*B^pR8FV6Bb"
%0(U$0s+mL!`"0S'Pc!YYcCKZ207UVh7='l-Vrg!61i&:f*c@NHQ\3VH)46Uhg8<9$`?eHt^V!'dqt,3WQX'7iJ#@Y80Pbl<.YdD=
%R'/GIcH4jK]Ztin3pQnMDuAq&f3H3a_4k)YBp_@>11iYLZ"BgWj*rN!ptrLV(jhgniiU`=^YlC3c+IhrW:c\$>0g?X!/hY6Nhp7U
%[d#A*fT\]LMmm`P`nX\/Q#lYIQ[diNGS>_fM^7-Ao3.kkPK;`XSA,Yo76T"_<]^00,)4&?;7!iI/4qd33/gFKL3QRqYpe/4,-Ptr
%?P#+CgU<$'NO]DBIa9P1DGF:fCQeLQg!?-4PXVZs'4S@,e%IgJFUi,AR.2Y]q)Z,rcf*Q:BLZJQY&R`X1_psgRiTVH3-MpTBO'TY
%#o4D<fes(VP0lgqB8__gN3BUHN5hrfnO5oWOjUZ^)3$YdMdd`FU+k^YRurSqS!VBm.kgE.$Bom]D3a)L4EaqompG`NI>^e>XSQ:V
%Bih+rDfMGJVQrX6IVf54;62\-0D@6-`r*PL.ReUY]3d#[]=c`7ra(;#-=Z-/+,eTko6?p9&aq=2]g]RmUVtAn]U-JE>Jtm[&F[m&
%bFB@\hbB"';UclId"!bQAW)(WL+U=fi;9DY=p052J1p$?Cc=T<>>%u_46nVn3DVBe4Pi!bZCBu2cGP,PLK?.hpVi!UIn>k`:Xt?o
%<P4iVL0:.#Ai@UoLrGjEDVgkDB$H:Z;d*fTN)uGjH==H%`bT"qE3c;/[Vq,tRYUOgg(dtG0sb&+eZT2S>nd,?^NsH$\'^5bXG]$V
%?Hr-i=t1IFlde%T]$7lDBr#_qDs2@VMNX(?G38HkSJ7tXDN(E`%q@L.k@IQ<cqjO.YNpV%=/r[i6JKW6Z_<Rl]<H6TBt*EQK6jk1
%9c)^-+1X$#p/C>B?C\b),M0T^'H@!gZVmp7lKuF29(te-3NWX1QX[#_Aje[/&cjq'rA6:h^J+!h)>Q7_B_n+9QP0g@HG,kpV]ga4
%hNUu7!T-0>EfuQPD>SLH,20R^-6\X`c2?pqLEd+>hC8=4>ZE[tZgFPiYQ$7EhXmVkCo48cC!O)E:O8R4)EOhMFj\V)Zr;dV;QUF5
%_[2fm3^J)PlQWCXr2]D_31hO4h$93O9(U>3?5H0^9SP/S1&*8n@Cjg[mB;Gh']snl8J>i\Y)e<DSH?P?19/kCK>u5:ifQs=MlLBa
%?*C'65d4F+<aU$u>dU=b]s]UEKo%dlT;HXuGe7a\3@RLuV7Bfp[CXr1U=*qd;QVgW^C,ZS\<+,0W'm&UfOjN.Y:cAKXh#tGMa\r7
%/ELNFMb93Q;MgRZ#0aY9:8;\_T4sb[X45?-HP_TDPj=`"o2LW'+6IA\C/Ikga>]n1-.V:dW'sk=UAQ7:c(Ytbemb2\Y!k)F"gobX
%f%ZU:)A]_/1Lo=Bo2LX29!MuWFt@B*&j>Q+I;Rh8XJndfUDK;2f."n4rSjnXQ"pb!gq5^-DN5ig.i-`n_-Gf28/J_f0"[dG/o1'.
%f*ds`iemFK?U-TOkNd$0]ef?<GZ48'\oq[okUpN3;S:8$@H_TpTh?QWKqV]f\mI47GB5jCEO=Q)8V9Me(I:Qp3pf)oAH3aQX`8S,
%MfJDsrqOg?mOpd<ZJT]9_85'uB"\^qHI;0YeY[75XJK0kE[OsOcbrr)C2NeD6b47bfWHZ=]i6tl1tihuUr<([H1Ha'c"cfZ#D5YA
%r8Nd6)(f4[2l`"6HCa[(jG,;_dbO6[`iC>j'R8%Dm+8;/?EIP/?WfbA)SSXjs1SI0O8g&bkO@^t_#DKD7cn:Edha6-qZD<&`uj9t
%)YT4aOT@=Dde]+F",!AkA01/=H@nVso$)Km2MDs2BqQNA,ZnbOcqmeLN5p<$)21ht2J`fAOUus9MGsXgI2U<rdsS(BbUgHlf=-7\
%gUf>7)o[gP6[),U=kBnea+FnrCBXb:CV]s4'*1jA=Ob2EI;E?eNb`7`=7F$6BTtNW;%er#f;JG<$(fiLDnS2"ACus[5>JH2))(Ut
%Q?lu=(RFn)/N)GDa8Zo%G[Z3%Rp^_SJeobY@=k],"D<//$@EX0@5BV9&3XJQ%,;snf@[C2J:=foJ+191r4o!:q!Z(305PeMRiO%r
%p;1DpD"cE4CsNJ@LC>tN2))dRH%t@KPiseQ(I-Q,)[)Pmn,go["7NR\a22FAD"\"$r<_DI@<:p,2qeLr<k#&ep=SR<od(QGQK('*
%Duhp7W-OsP#.BTG2rF.QTm=0Vl(KQuE"D*n?nr%\IFJ5_]3aX+n(I3H_(Y9_5'udOA&)^nrkQ:_pZmM/Q4_JKo6f;tcuj@2cZX:l
%qOukp!P(t>jjI,99\0[:KBn1l83LfGCq"36-H#K3MS2Wg4rDceEI5_B&0#ZA1)WG"M_WfaB)3kO="r3F^FU&IhZ&Xn,jdsKr+E4U
%ZFF6)Eb@1M4eBS$/P>$67YoiBJ>[rgf$4[e-Cgq28![XsSj"n=09^nHqc]&3'A>A;@/HY:q_TmVOJL6fo"Ih15Xh$ts#tkl3RFOt
%p\7CLAjXm3'^Yl]1deB4)iVCiH4h'lO5;g=L!I+o*'lV3P+jUraRt[#cOkS:>oP=ZTbR8;/Hm<!)hq-Z>.,:]Eh$=*0bD5&)N/fV
%g*(SZ6J%6n46tS6M2eXQn3CV[VUh>qK/b&EE(SI='G*DG%M=_kZsBfS^d'',O9"7$52(U-?SKk3F:F'JTFQARLn-2eR'gepJFjS\
%Jq]=Nq-lJqTE?/'$6riEJH:1%(A7oOO$`3=CG#2G':SDX*g)^nKBd^"F2Mu+AhAC_jrehYfrdbiJ3@>5JK7pkm*g&R1+5o5f2PY_
%F?BeVgE[u0nF^YK[;!6*1MU6042_0?E1*Xu^t'Z=M#Tgg".%TB/c0(9A0AILX7b_%!OfGqE?A%4Cr"#a4tXTGQP`B(#s4E"`AqWn
%Lo4gOZ;3/XbW>N"BEZOsJbVdi!(C%Q:.=g'+rQe4aXE7!)4'GGb[Q6[lgi=fVV3kXE0a-AiB\h^U?NLe*F7+r-II2qHoJjG9bTA5
%,;GB^J:Znt1*T,c825IiQ6o@D;^2mOY<u=l3#[)YM;&;aMe!HN2+7Ge56=!:HMBGi9<!m7=H(Ko(qO5n9ONOmAe:;<r.F2IN94(8
%4"=>GFNn?eg9/I*Wl+]JAo.*lm*hjr8[jtq"[cmW[$\^X1K`f]J4qR/cp'&>K+nf<C/_%=eu@\n8[Mdu5>=Vb[0"o*c&[MgdYJS(
%9E?/8ld?25"GUc>%dVpQ9R3OrDg2R1A>^Jkl;=IN=rKl#&2O/?5###ORlB0H.h=nJo+roV-o_!TLbJN2?<,c:@D2YL.>;K?*tS?g
%*I!t)ec4+A4%>n'7c8A(44PLGBe<?i^ra2Y%g;s(55Z<J(BT+f99er;pp(lQ/.6OuWG\kPP]6jhGE4):5i"S,]%??lrN,Yf)cI-<
%TJ?F"[B`G7duSsknZ5?*M^l)LG,j`uWHF2RM.jI]'*K@8gA'[pl)2Xr/a1DEI?<UJ;8PkBI[*NFH)=9:EP$R^NYRPrEJgff&</N0
%^32q1UJN!)#G'Fa1^c**ji'pNqTne5@bV9)qJTB]omR(.-+J]H4A;rXs2;Q1R!q3U5E4!::$)Ar?aIM[cb_O'2]L<C1#kaciI8Jg
%S0[TG_O_?l^#g6^8X`iP:'gb\,:#8u./KuA)iVC<1.i:"3>7XROk!UJEI*qnp<0<h6(9=3s2Ir[g_kY6<3Di%G'f2_2iA>)nV:_r
%IiuYMc8+L$s)g4>#[#\j!fpB1:oT"YFToj>QU^+\NMf9El($=n0dGT^jE=3Q,;Uq0&e2I@Ei"1FXIRitH_'T/41`SqS+V(:[J-eX
%Nnc)0m=^mFV-ED"q@.ahLq$Oi9SMS1C=k4=km`Y7Q!Q%@`S5hs<p!NWB5-`;]h5ooXn;)ae')O0;1l%O=!*Q>]L1PkF'[N@5H5#Q
%etlKG2X\[8IO[4Tl-s#s_P_RXUMG1!@*?PVMM4\"B;L(hiK4Z]#^`aVn(2nNl^>ZeIg;D/>%:AhDDW:7\Q4aE=W:'tND]""Z=68_
%+@&S=g@g2WF=XcQW+*+`rUWlgV:k'nin3^C#"ifT4.4lCd)kWUqLa)iO^pjN'$?bZoK2iJ)IR6L;B1m)T=6o4o?M:T4RG[&G6JRS
%S"8S3F2-QP2Z$+'UXNTm=0%I/T`'8jl0:JcR=<`2l5-@hkB9J8AlD7gD7t]l_63p.5^'XB^NJjAW:^ke^_%$hrSN0pdh<Y[FH*ZX
%<PlhI!7TjrR'aX<HoFTn:Sg\^&RhG$Q<7?Zs7NUJHBTf0J(C(qXA8&*!(o1Fd7.0IK6m,lAH9@lGH-oTk*5_l+F-\GXT?msDl4Fd
%X8dX)YoaIH.'brec=9P;l"Li3g4Mj!(f1fL>5Ils?>BsRRJf1F+]WZ4d:AeYBhP`jR[&MaQ8pa,M&Gm_A\ER?VZE2cD&b84NQ<?V
%_a,*GHce_9<1ti/7-A3rf>Wu&Cp&d\;/J5&@&G[ZnR!u"V_EjM`)lXcnjng\>PgunCM$tg<Tk30_0GL+F`[UqJ_^[bWMt%-TjG8c
%U/A2<SmPXn`&^j%4EK9lmhCs"3+4cmqhN=hHhb9qS/#'F<jpK)Q#*gEs1H`B#/1B/3PO)t@'B<<N9RSPo<m2R,Gr.'9u4KcGCPTB
%OgLn3Co2"qW7Nd4HtC/URcg7%Sb>W&UJ9-MN*cAQff&@a!\a/up2'N^YY,=.q!>g-%UN>snd>gfI9,Vm,-c8/8=tVC`:O;ZClN;L
%&P\FJao,[ihG3[b-FE0k>+k!%G'Y^N[AgjF7'C?n,k>i^a4j<*(E;ma`QAk*=kaRdB=+c^Xp0oS%EGo97"<4d<fImYH+"#P>.U#P
%:,`oZXE@<+@5>9m4cAI@&cd66C?MpM1)s+Na'o"B.al*0O,n$jAlo.MN&k^j^D:T50%t981$XWUBI]1dL$GT:`j_D^I+DGU^M%1^
%GGFP7H:6$!\Y!>aCA!&9[&o)rj''k^l^Tf#UN&\2_dabI:@GL:5Agm5Q0qTb4B3H9>.2mAc(7Yh9='t%WE!h@PA7!)Apf..ng#-X
%WEd8J*N>X._,"l^R)[cjF=FgI,frm\[k!RdGB*bNWi>,'Op@6$'Om^\cR5]+0@j+6+sS\7cA.fIlhah,?/"uN,`Y5B;#HH1Ftt;I
%m9'VDiVJc[RjL0sPtCQR=of-=[!OsH;%%faroE;H%GUR)ML84YR'iTZ4`92h/BAf`I5F9H2*#@]ZMia%IhI%ZVUk,-:-&t_FA+c5
%!dTW]5Acs(>F"&j+7)tFkbi*s<g4;XV_1s$qA<_';+skE=.#ds*5s0U-YuIjL>tmEU,laNo^?3l:UA3n(*1j.piKF>n*/mY[ioKS
%UTER;,o^)'N&^LLDp18"Xhf5m)M@0_kDUQUrfOY/N((--:B4(%<,Z8/>+6d+1<NuDS!C-5bYoHU>[a;]T[?^FP,*BACj`WREDj)3
%h.BY(J>iprcNutu.KD3a6lA8:eB_1LmES,,>$2HOFp;U-4\mp"e=h[hqi`Rhen_\dp\BL4JWNX92Or-GNB1lW-TES0*X3(5p*<OM
%W;\&"US4Ds[e(nnONkG=+(kp$#k)MrcV"N3G5"0RB7=%EJg2PT1I^[;R;-BG!$ac6L2W@qFd^WGVU'-L\]9`m=8Ra7:XeKH@3$IJ
%-'A>`VDqi-#Ng@]h%Rm\-I.EBY>GP&;9sZOC"_nG)cJ:92?QV'4mVb>Qep:`_NJoQ/TYZ:*`Cua+6e4+Y899#8skGAP@>hsi"QXs
%F5iT]1c$NN9Wh">lo"cHDsl/&-hYED?=nQQ+Hs_0>V7KY4`=nCE]]X2USQs:,ho<]W_D]:A^DL4AQc$\`)03lotrs?V>?q^Bl#@T
%44Lq%;="[XDCb3ug]#iI)mu5)JZ8+oZo]bpQYEfUSVK7p]U,:d)J*AW,+-AG&;W&9+<&q^q+FLYbbU7Q@s:g;P7]['\)sW4`4DG(
%Y"G.CNV7Y(561FnfH-!qOIc)j#-4[URLuk[q1WG2dLoq/9/*mNa2mU(RmV5U5Ufghih&i:Te,npV'D;$`ghI(YfG<2HucF>Ce10B
%0k.a[+uqYC7,B*l00AProrQbZJP#a>c0FJTP2p+7&0#@&1N?J*GZ1P_g"onB@X'7]3p\_-0@<ls1@q6FgkMBTZ,Jc,FM%3;M*KB<
%V:bC^rLZKee9`eC`><2a/Z*ln6(Y,'\D6;Jbo/VmqaG5);8mW.hMSm#Qu_1"UtT]5=6gjX1OI;u7Br(cIFIu*dUM+m*X$rcfYc@]
%pG3dD6VSDcI5Btq\^1K$67[*a&h]0Ob]u^MNoOdnnLPj^0HIpY%*ol5/eZ/`f6pj:L1>8d#a`[K>ia+J6t=JF3/2Ch6pf?6=QA&*
%V>=/P0KAAO,%)QjOX6hoCe[D>/mqa^K2jO(8Xd[3PbSm,%'PW0F@Qq@2^QCu*h*Np'iLWoM5Frt^JY>(<3e#A_ZF$.[#9']-DiXl
%Cda=<e+g*ooO1^l\j#@6,p?(4H<i4&:&X/+Vp/-hB^EXA7X.KCRN8^M#jYEjpT(tsGEB%c51ZqY:.teHVBmqm&B)4ueGi.so=gMu
%).VJB_OCA2.1@@U`JsSeLetG^?XgslO'bs<VtD'q249+`JZ&-\]ns:p#f:lC)kXK**t0Xd>,<T+Od+kSnURhk;GUas>^[-;a5F(b
%3pjaI`_.KoL']m>RA[a@htYdhK1J/HGV*?!_P(""P[_mbe#u\`E]>XH,-aI!"G5mUZXN10?"l-nXJ'*@J>5Al@`7Ar7XdYbE*kHU
%Bp=i_G3.[r:Q<PlNOgG)oF7P:;kA8WGi_RCV%\PN-"8g`[Kuk$j/E@A)K!D:6&2JuDR.+kn'Yq*Pa[r\eEjN3lJJ@:+DHOU+h'>N
%n(%3)(sbk,O7r9>n1[t7^H0("1r^e4H$K]nMOD>6K:R0#>_:Af1?QF;Pt`'i;QWPd.`Ng]dPOlM((aao%`q^tS`@kc>ktuarHLF4
%Sp'\li4aC&\2/-b-_c0%"Zgq]&abR;HSOJI(A<Tk-;&/ldTjl#mF4BrNK]+@0i,2%(GaeqbH$)5#'FH&L#6$r78llm,0+[q9N!Qg
%N4Y7Ultqp=i%2pNjd=T.R!rbSp6a+[oJLi&GVub=E$M[lGVR2SA==g1PR9qHg:EPm;K_+fj_+PRYW6BI5]S(Q=\ClML/==uLYH;Z
%o&0D?\[Uamj30.Q8^Fq1bVqq1.X+_Afa6GC]o$G_n5nepm_)CHS*qEShl+1pI;[rs?-@0ZT!lqq:YW@MQYroXh(LT7g&<#\c*M9U
%pA3@0ViP1G:Y*^]n%[ZC%BFqlgNjam2'(kg@J#K8Ml3VqSZRmTf`t`NX53bUs+U+WL=t9/hs-&!cNj9pB<TK_RnipTd!52m>0LUI
%T>nl#f07!#I^+!=h>d7l;#L;=msJAEc*]Uo4tphm[dr(_4Y.>=47DatS+kgV0Z=^cq/Kk^GPpsKJ,B)kkM0Jhqf_n9HFri'>FXfP
%03dc@CholWH?WIpH<NC]@>J9eDd\*Q-XYa+q;t`LrVB+bCf!+_5FN1EI(NI]RcPVqRnrIe@iYTurPI18Y9!C[mmhAq[W<t6(4<l\
%4'9,NAk9S<e:oYNpjHkQ\m9Gc0,;d&UQ*OR?2NJNrmg;CQ*%q%2l/ihpu(\skI8bqWn#6PIVPs#T9R[Sd&-?;iqF@8^9'?.5-O(;
%GG!Ytl`GOUk/mr'INS[7>8to7C`(1HGl)&&f<3tKXZUp?n^)3&IamlcL]%lJf;n>,/*H5qm'9fBhL>p'oC(<0GIC@QD\O6n5fi*2
%7n[WuomG6GCG?_kPj`K)FuF9RgKk=p]QC3ao?"WCfIq?\Y&(hSI9O+?Dh"I0+1L\?8WUOi[o"]K]Q`5u2R;Ufrd<C'isPXk<]8/T
%[pKmm<]9E3DQS<Qi@l>Pn<J<n-8:Bur9')-?WJ572Yj8qGM=cQqnhXl2qFJk_:eo!IW);MI_<@/'q_![iZ5^Z[(0'2rou"*;dp16
%mH.\/%(+/AQRI5Y.%!Ygp9@WR+ddU,?T]NUK7Eg;nNM9VX1?.-pQaa[_\YPG/!^!Uo%ro+fAYTBpMY)aL&>9IjIl$Qlc5@b;]$kM
%HoO5t%/oD?5&MI1.rY%)qqQ(gq#0#GU%-rc\8fs.HWhnh4>;>AO2(MiI]]@L$k@`n?K?:Q%pkKXbI&.F4+c(#$D7_7]%P[c:Yo-$
%0TmK(6"OilE:@N.nG-H/-Z4UJ)CL1lhY1oEXq"hDm2#2+PO4F=];O5hbpPrToQeV,4kT\@=Xo#`4BPn2GJ^PYnqo2((Tn;R;kGFM
%r?:\;WR4lA]_jU1o\:_*fj*cZHn-e>]ZB5oc,5UnnsutR%$N)0]]"<A0.l#G/f2gGrU]EAEjhe9($<>f%N1agm2@J>(<ir44Ws1d
%EoHY,]C0Z;hsBP(O4Lp?3UAnE^5[76kL8h+e`/>T/E(mQ70/.b*PSVWJ?aA>(A$Vuk=PGH;m"m)&,ll/So)ZTSiSObl8.'C/akPU
%8k&KL[IX+W2n]&WOToo-:J0A1f?\eZ]5PgbABeb*=)$1D_f+?9q<rr>/)P0XmGnc'hVWlJ?ED3X]%a9V='"SBRf=hGIr]]S*rBt2
%n#_i#\ER6NT%nhX!PY*\AeMT1^4.I\3fNRfbFr4q3dpWAmJXNRZ#fUkpZ?A$+)Q3T[t"1P)16A*D3B$?lN.Qk)K_PiS,)ZPDPOT7
%e6LEqrQ"jA'qHq\[V2Pm1ld@G994P7;_-28YGff@"90&HX<5A!"Q*6<G5<Ro^T4j"]K'eWarPkV?JrSQ\Sk]AcO*fgo'J$]KCZ^g
%q/LYD3uB#"l;q_Z2@Ue2X^6/K*YXr*;'18>I'Qsiqu2MrD<(HMe!BN5WO31beag]fZ^,*nSptu!_Pd-h!ERn%@HM9qT"ne,VA9*k
%Ml"mSGk*qD=q:;Z6i:pY!pb[8eh'2"-i<DtH]^2ENOsQTM'07T4/-.e`R-k+o]6b4cYGt0%`8UXUL!p,)MV*]>p<Iqq#^i]]b+O,
%$pHkt-&M9XW9$b!*U&P]oBD,*q")>i-FA*j"TJ7^e%&'107DXhN8/f_0nHV%j8E&RQ`iEg>T>(?X^q66<#?jC:r?DESdKoIWkA;.
%a+@;'Nj*]l.oR?a*um>%`&MM[LkTMMT1#%Df>q%C%?esQopDBk+)dEe\s0qIq*dNp0M21Oj:X6O7l76NE?\a]5r>T%%i*P_$&=<2
%J?k4a3neC]"Fk_;)&<$YUV;6%k)C!V<4%U4fHk;DbXe0XHtMAJ3"L+2V6RaUfjKGjZ?rV"&D,eqi\XAndT6saq06*<-"S@,E.StV
%BMRUObMKDs6mNp!N7RluUH[Xhgu7!(mF'SaqB<cX-^MJqKXj"BSu:\u\!J2f9=GsQEEP*_a6S<G!7pRg5>s]%H?]82Bqb(iBPY5+
%ro5&(gGC"i*UJarGB@2&jW0%:(p-4O*^[8Z]!hNiq1O)VbFd=Z(Q$1kgKSUb085+diVpmWM\eVK3_B.BH>^K'gtb$dg,hde[^jpD
%UVj00BX.QZBHD#nI4KG0Isq+Tng=]BhfcK0X+q5WhQ!u\KpH?Mpp=.QYl.8+>i\.5+,5Y3gcPBQltXq=mTDgQM?.\K/9O^TgD9,5
%]`X=tFWS9Ps-uHpd")7*hYh\ei$ChQ64VKkK9m:7Mf8otU95YZ/?k.&aC!7n";<Vu]k:R[Dsj3<\*<k_4F+Go<N<+1$Toio((o0)
%cc$]Gmll]7I%5]"p$"dAp"_8'Eg;XI:JF')<I1T1gAffPOY-!KpFD,B(jI1p\-R-BBE$Xtq(T;Tjoq\H9N.g`$BoHa#@m".c[-et
%_:*e\48hRP!=Ya?K/fn(h;ZoT]60KRY;\37;2%fHK;[NiO2GpJ_g*!a[lc!lft>Xjc-tH6F)(q#5Q,"kpRgeU>AnD54IeQ^:^;H?
%4&_:Ef#RC:KsT+7ecFg+,G>0GZ9W@EX[)m`jU),?HRFiD.-h^/I*J9fO)Cp=Us9qF[8taA;*Bt.dU'Yp\c"N=Hgsa9^HB#3g27F@
%H<PO1<l"?Cp!1HNJR9uncbJ>kg9[)0ZsI`OLEGsH?GAOGM]oY+iSA^IZak/'nBZm1HUbQ8D*I@UepAW/Ms35WqGe%8_ar$'D=r3f
%Dk-Ken".l3)oe)$D\rHiN0CKMUNO<*bs0B5_n9E\^?OO4aPkV">e'<5:&]+qr5^d:/6^e7h<Ot7r)r:#nu;ehlQ$*nX0ji:=8SiB
%dIOCqUt+>U4T='kHM;aIhYPpJ5m(0*n2mV]AufF@Nb<.HkIh,X\>I7<k1969el9rU88maiZ/t*8d?7$\RqX\3<dDj0doaKjV_LSt
%SWcC8hs`&mYkABnMX;L>OY0RC"13Mahh&gP9Olh)>'SGj-L58_lP3TSjUZ]jgku\TNQLb=Mc[;qXVIuG'jUSK_YGQKZ1.*<>Fa8*
%[iT0b_LQ4PhE>o2leh-\3NJb=4j5jkq^-E2cmE*&L1+T+H4t\Z55KU"';0i$C[4Lil]PMicD:/b%JK5F"_NEL\-ALA+$]\ULjCsi
%^HYSOc^4.l.6:<)]9h?+k^(OCqO@2%IJ`?unI^!s)eaRnQFEnF`oiku'YXcMpb#tR!?^45]s[[sc+W+3X77Y-^3uWu]md20RbL&3
%.H.qMqt,f=5<!@@h18uBbbKs4SPS>Pk^i)!'<p#V#>++aL\L3VP`BY=qbTBUQK=UPS^l`kV<'"DH'B$dpYti53G:nWkJkW7K<p5.
%*EZA:qqEV3]G#_,6[<g8nmAl_hAHa_ct*d[kq-gM/n%SDG7V#qOl,Ta13PiEh;j"*-("260>F-LX>fR^IL3aFC9CP6nE`FREKPG4
%$4O92V=WsCUfMCUpog\:]-C$.l<fn(.IX_El?&f+^"W9qJsg`*gjr]+o!C9!E$*h_Qc:AL9=Of&[_+_4m`cF6rR8Wa_V6F_$GuO$
%HFH(h9Dr?B,e`k<EuTC+7M[u]%^0E?rK@@EA7;4Hn@V8f+3uj'c*FAiA1ks,[r3!W%_d&mNBcmAT\n%4Y5NUCPGC_p)q;RW::2%T
%4F(W&G1X31Ci/7F\m*I"gK`ItXbB-Lcs&O19C5aL,lI@TqdY%nDhOtGpYPj9n--OTaE>dO+!B%,.O2VTqYF?g%qn,Zd8]5t,L9-5
%P41TCI@0WDII\bHMC5V)\4AEV_=;qs]2Zk"3@tuS:A:C:H"?@(_M@<bj<hDBhm_G`mSlfJ`IWaRf]Ck;DQU[ST5Fhgh@ZS>'8G2K
%Q624$5aV2idaH;9^M#9i:Ra"A/!'Y,cZ$SnnT!TAPa2bZF1[J^rn!efhsYEq4ZOKsSNlh>%u]->g=k-SX7,5?k72t^H@M77"ho+(
%kO">#Kj,/b(9E9'&_q:g4KEu1-J2UJFH/K<*>Y8qmIuO>a//1JjZ@\DJ4>"_O`0VNG2l3dqG15=c9IHo[:(\=d<"`-%sRfQG]MGh
%GgJEaBiB#Ls5i"a];8^b[X,Et%Z2X)?8b)f6WciSQZ7*1IAq2V`)b>X`&Hm7pmAd,Y#jl5qsP!3EmN'h:ESJrKAR8e/9>$DqlqgO
%h'alBeD=U6qAHESqdP!F.g?X('bqt9D'JkndW4:>2Vs"ko^mKJf?Dt\NB]G\g3h\hX\VRJ*PnZ-6]I3tJ+]T2pl2VNF4Xa27[%7-
%$q%-&eZU:b0QE6OZW(g\=5>bC]p;r!i7IptJ+0`HEqll*lf:g,`XDt)Ih@Y*@gSYTj)k7]M@F@eiOrHpVJJZt\ST8[!1C;T"u)SY
%gH!/t;L/ePp!)-lId">]X_6H3U@Dt'*BfHte'eh3:"k%10#u,0k9$=3%"`'S9>9Y/h4[AlDhr_L1Z:P8U?U<;?TZs-8Qtdl`QMo;
%7_[RBIN+.82,2Pco&K+IA+RG&ht&H`p-YucWT0SiD;=J4Er2EuTX_T1UF$tZo:\Q6ZJNq^pU7,PH=%fC\^`3I#Q)h:4cgc3p<+.F
%Dk+3&h1Oqj];Jo0"L$`0f^J2Y#on_gi+Qr>gKrRH^B-Oq\i-PDj-MGA?eg4+9A-,7@2M$$]<0=iBj#Z,7sd<7565aVs!YP6%_pBm
%ZgtX+0iWl?9d`j3B^,3\#E3%s4`&n[hrMMSBN7*.54lWuHHe&ArTSJXGhO7t7f$;&l1s&fK)):ohl*a9CB;u_bPKSHJ$d;1,RaRH
%>*#,t@4jP-Sn]bYRGX(//'l!;lkgZh_g67N&9f00+)4Tm4_E+^b]<V8_ZOkt%n`\#;c*1?iF-T7)LE/9'.5J+GR6G'c2oA)o4@>t
%FUM`$qOeiHL3.OL3rJRt(T_3J6s%bT;)27Gg@`+"?E8?ihgB\gpeM7C$>5uGIpr]WkLSd2qeP`@Mp4KJ^@UPukbj[qpU7Oh^:XK-
%e:5/@=K=Zd@.Z[T__QVfc0[IGG7g$DH,%m:IfF'N`H*!*s)u,GA6hV9^tqT]n7^Io[,&Rc_P?+ili"B)3rIe&*rgJh%:R\;+/R4[
%Pq/]<<ROPIo>GKLT>qpupJr>Pq0s0Z(]c>d;Xb33SP=4V]6CulWJp%eX]@Si[jhp^o$'&`nEKh2n(StS6!i[Q=HcfnO,'QM?\W2q
%_/Z*!VmZ6`TgQ]D"`D[K1mg[+*j30Yl+^BD[?",\d`t:mr+`WQ<Rg:l,5o4Z^\6t)Gkg5MR(1a8odeY$GIbUMrh3e.GeWja%)fX3
%7FI^Il#6#uc0?5GS?_miX!LZ#?hsSgLW'LXLXjZ"%kmLa@!)_O]@T;_B\#d?BcQl$J@OpS%6dh,RbN8\%/4%'59M>T#YqT'KXIQR
%Bqt7%o,U3RLYL_TQF=\+A,GThZSu9=eik@ds5q#JrUcX"Rr[cbfZm.5K8n0"eQ[4g0:/"EIXC8N$3fdkC$aI0$bS%H#Hb`3EI7(?
%E12"-fk[#`1qp,ajpm=J#MtLXPp_V8JmO&mCX\4P.!p7/#j9J&qY?oGQc=g8R_$V$./\iXW&:^gqfUk6X0u'aBboQb\,h?WqXa+&
%dYiL'ZJ#,bg<j"6ae4"/7PlegFgmDB[p<Pl,=?rKBB!'R1>O.BnhHs4$UrLP;2aRLf!d0e^9?\Q:N#Qb^+Fc<E)M'95/25L-j3!%
%7pe2uG+\/KlgN^N"#]`apDlQY\D;CI@"K6o^L\8@Z_$@Seo-%0<OLnB7k<=I=$i:&/#t@j%f>#2a3UEZ2tsn-_Dg5AmY%M,0TlXq
%SmbAYq_`SB<ZN<Ks7c:!H1Eap>?@VYBA%Q$5C1%FDjGM4kNHcE#OT[tl'g!Hm#Af-bt:'k7T5hPIG1aOn=Y-*d]W+,c&"@lZDYiI
%Kq7P7Vs"W=GX5tQ/9]20_Lo,6;N/&HE.1i7LZ?I&M=0AmNNfYX&+/aT<,9b8#\iiG8E/NUQnb]c6SFqQ\-OZ.s7)^-<i\k`]''9(
%`a$fRgJg$:QmQ)ls(80r=jP#-4G!g+Xr'[uj;WA#+ejI>0;tU(>/(%&O8fX-M_d$VB!D`V)\Xke2_luYNiY#8ZY!?Xf((p6^Z*Qo
%!&Zl1I^c4i9RY>(nY.-(Zejld=6TJ)+9)X'9?Watmnd&qmcE:5Ar-O_I*jA#AVN*,Chh>&%X"=YkZAu0l.OJQqGSd:@$%d5#N1?#
%[=Zb9@rS(YqH4cp=:'t(2orS()2s3j%a%AVZI+i#De[J?]"[-YSlYTTcf_;^-h]Wa.k\?WOVgd@bm(V7#d`thO:C^PPY<X'?[:u.
%aO=4LR%*aM_h[Z2mfC-AZ@tE`3YkBj"Y=FSI+=m*1D\*Q'7p#?-p#i&_Ald$C`pY>\`$0a>m2]n+PY4'Tgd:b#89Af_%W9_1o$HK
%?i$n!?Ij>9(]YS-#:^Q'apJuS=VG/\BB"7X/JfS'W;t5:UccuO+9fP_!e!:Ki]D?%[JX/.e-:X+6c[KjdASgYnB3IDNMFqMJHBPS
%J_;.S6Od_FoF*SA`HMbM$/u)d:;h*k":?k^1qXG=_FTt),(ftJCUk4YPeeogc+55=q6EJ=,#CC-:?\s1=_W+7hC+7&ckkE2"",7U
%J@4Sp&K!r@kP,>WY=8N#Q$)RrN0-]-J3o635gKm%:!jq7AYE[*-]nIFP=RheJD-Z$#NKK&FqVbkC$@m"&ij:LZZOW#A<j(I&-^J.
%dt!qqfom7.Nl:CT8.N@9er=FDK^"@@;+^t+g)')FZ4k?2DB(!5Kqb".D:aUSS:jQ[etU&Mi'0>dg^kn(m-$i85bUaj/;Ro:CS1oM
%Kf_&N,YX[sl:D$+L?&[Y8)gi'.#(;dK5$Oj#ODN<f7<?U#X54W]7O_KBg>FHl:N\?UIb<c=Teg-d#P''K]uYe0M6q2MAPUIZ?+(p
%Z`Xm10FX?idK`O_-'#:p/eRjhcQEKR!Xf]T/[2RAkE)\m=HI[prTk(FKVep'&694on\DiE+<YY+"[Qcr!e!T8V".@`PF_R^F!+dD
%$ngqh`UIR*5_1Y8RXgri%Y,hK['GE*HAZkTU@;)H6&"Sr$lVXr\+t)!'#eL!5%kQ!Whfgf;d]b[VNXOs6U_7AUg>_Ae/:.q-o!h-
%kRE'iULPYqP_?[41`73#I_pKD9Rr0sJE7m`i/Ik_i:,e0I5P8:KWhP:!ErWU^r6SF"h6`a2'tcY"S?-^iOVVkWon!ajrOXjeBY/$
%CB4R&8cg6Z"QZV%f]/XW6/_VABGqor,9CN#@+lLFFjCMF:4WcSN0BX-c9u,,"$d^g=q24O'7rpg/.IIY!lpuX0ZFVI+R$daJT*Fr
%$L7Fi)`3On-7I/)'5X``J<ZeTd)k!m&WT1dQ<H1?=*1f3QSKTnM&@@.I>jsR/(?ffZ<t%W])p&AW<#/taC,p"cQgqL9'\GjMesJl
%bckC1@=<kO+K7U=mfMO<NA#r_r$Y(/-5]h"gdMC>`<1QFCfjPV0lR\GB\=Oc1gCJnN^C9qb)(]iQPtK*ju>31*FoUY9(^!9H*gjM
%"."'P`kSCee6Y>1#h0oNd:%0>!lPfi@)HPC3AAG"8JA>6#(n)4J:'BQBEC_Onq=+Qd36;pMRHsoeJ!EX#)IHh_c%%>1]r,Ea/)0E
%0R<k(epr=(o:3CV:FF!NLUFdXBn]G1!VC)ONWq%)J;X6hkp0B0$NpkR"7+Fl1.RRc!.&;;W?bSFhkCE.0TZjtd^fM>F_HbV?n!EA
%%20n,d"$K<5<kU##1:41Kr]t6j.O,q.%GA]2q3@1XogQaR";FC!%jC;"URON\L'm7_(`\11Ka;Z&0!3u6:!jD9[XiTX<93t6Y=qX
%[dpN%%Lg-BP>)cW#HXC\6(A<ph?BAdJV7\_0ju2UYc8N@j1Y`iZ3D/PN9VK-^(7kRBF"n'Dr\^6_:\*1fKAnZ.pdl[n:j7c$oNiK
%I5ski_Wel/&EW?T<bMUenIM[$(`91Si"cG2Idf5(h#qXA_OjjAD\MmV9-%.*-kKEKa0\PM#a!F+21[7Xf89Vm`aD,[auYK^R-Imj
%TgV13$An,,Zd_@W,T,K&aHe9c&s;16%^`OM'+lpkD1oX,WJ(Q8g/FY(R0//7Pt-A#NiIRPJ@L[J>i;Ig^)YmUZ;DoEg=QXI5)&2)
%-[ZKN=Hn"]?$l^@,_`1qFRa&Y4\>&dWY*jU8J>AGBFK*Ys-I\"7u^MAK5#(gAGJ]S@r-Hd;G3S/R,oja``M^__1kF!O#rm=@56+>
%]Rb#1'uMa(^h$b[+VQC;6>J-0W[K0OaFG4d%L;d/%WgTGY^#(OLDgjmjSPW\iW4rp!),0i$S*@$Q4V?(UD3f]Xp5iHIk-&g%icW"
%&HTcJJ0BATBu"`lLlhcEU,NP\q'ZqOJ>'G@&>agUjJ,lN,9Us*%6h4P!Y_(XE(,g-$GNlW_[<RVig?B*cqqVLJ;>*O*G>mQeC[pn
%8BGq'J2nICOdO0'7fe<Cb)$`^Md9fe_(m"!(TnKLX:>3)3').hfqT=[l!k*R]I;27N/!8sdoteASh(t*ZCM+H=B8@e3=H%1Surnk
%K_21Xn6nSUC#oV^l_E`PlE!<?J-oesR)j2A9](Y>I"7Y1;H,c:5f#+^,ALWH=qFM,-M9l[KVB(/&h9-O*/+ae<J*g_O%\ujb=_mm
%>7mi,Y/_e$P@$_V\tt357"X".eSDamLkn)]aQ45-\D_5f5[AAn%-a^qNR-kRMAr6NAk^A[X"J[cBUY]Lr2uk$N+$B2k("4\19Jk8
%#6(,!$4Q5BVA;jar'1a0OJUYN$,C[c_C01FrGZd)(^SdQ=g[M]Jo>Qg)M!mn[b)G@!eUo&-A1.oNj/e0#R`uG)?e]nKhHqb\I+"D
%$tS$BG*D^R%`Mig)!7X(gVG;u!(j\3AUV?B'B;j\E^kJA9._1&RE=5on8B$Ir?N.kF+G`i_Fq`KntHpdg^*S,A1#.R#>8VtR#*L=
%D4BHDo<0/BXYS!%pUT'q@+!7YQ^e3B84j`N!O/A[73Mb7OqA0=0(4?ddVpZ!W#eW?PpWBUBb?gmA$kFNc$rFT/KH1&@mkYj:00:f
%7ar`e:'itJas;8+91aET%pb5lP`U&,`4gh5!Z1>RRr'iUfc"`.@r>l&1+\7ZI59pl$6a'5o71)h;&bXjZ9Ah5@@#Q?`C5;2!NA@.
%An<,9Hj>9;KF16f8^!l^/M?jlU^AAeWUeObLO*+P19hT"]E!k1Z`q*Yg0fKT')4c6+Q0Lc$kk,.ni8O7ZV9=jR6ESD<\OTo>oqI)
%5XD^VlKiOoShkqMb'X@fB\Od8)\t%Y(=OH5m@)*rJs6pa`gB^pH.[uU3P,SfE#Lhp+r?UYVIOtaoHYj%=q)s\&`"n!7laKbcU;#Q
%_dJ_f!R!8IiKW$JL;caq\I`0q;os//BFUc4/YG^Y+S[cEe(+(@`kopR\7q-qj'l85-?:gjd=dpR0H\?7h65SH">+?P:i5^3dS2G#
%O_GQZYlmKheCY(nn5=kWN0Y?#\)$O:M\.S8&AEBg"c.KEZC[H"2Cqfa?Ce&\82sH.YZr\E9o>'TBS_pkI+kM?!"/-&RipYAq6gd@
%^meun!-[Y<^86Gbju>Cf.85<shI_*J)EEX>n[qQ;@r8:03Qul)#1]gh/(q?aq-N9;nTmRlnNis76t>Fb[ksK8K0l&N###2!=V$E7
%^fduP5*6#!3%&)lL7W3G$tE4?K)l"?]it"i0Kt49^PgKZs'C3qk3QUVU?gi_1T2\`hb;g(`9ed6J=5D[o+*OA!2f-<.0s_k2[dJ.
%,;A#u)Q_(_;T;"[*B&YJ5pjSn0j/?0gjtPFfKhUS!!<MUK[9m&e?d5o`@NZk_PK?d$pWYbk9Gq#kqLCZgA:uu&WO*W]$%ub+VtI3
%OAdi.JaA,T36Hrl(hR2;(fRCp;c3L45>#md'J\nX(pB'H:t`,+!ir;S!#7c:;S[r0=Q"SchLT30N(X>JhPSW^LlYu7_,OIN4H)<a
%e.LTUU,QVJ@JO)N*)K1<H;)lLP9E4:ibC9D=-K#3c\*Ir,8Y#$R%b;s!FU/2G+jr\B7,['M#),Z0OYoLBPK*:ON%PPO6(Qp(Bn=D
%b"`(*0rbV<o.m2M0s.%CqJq&'Al+*8RT=_)larUOD8I8J.!ieu(m^00Ts.Mm#5Zh7'gXNu0HB/]a#mo>Tb7A4oJ(`*N'^!4Yo<pO
%\-MBtHrHC*SobN6"PKV;_0dF@EH<PKLW'6QR3D4q65-i$D+s6*9OP@LCs]mN%WAW%NC(rWI:T`.$>:A0mNnO!<rdB?J8N+j@KQ;(
%^V&G@@pLSdj#lH-(G9u#;AA&nKnaO1o$TcA5;fC861h#[*T]e"/E]8H%SO@s9FaJ\\.D3!%F&(>gh[>!9]$2"fkMWMBa#7*io$',
%22rMcSi"D7864Z.?&"*YpaUi&%Bs:[od06XY4;eJ/ZV&=UbGgnn]?nIK9DHF;6/]V2c1do+I9g.RG&$(3)lXfO1fdE-I*6t[?iTn
%UO7osYM^O)%gu+(c=q7sa`UVCO:[,?#*b@N^*L7aCak=6i\A\RQl]2hOVD_M<[J^*Br:h!eXS<`I*^_4dt,]c,W2NW$S_Ff2FPD=
%-,HF%0cWHm)NLSFcuIU/Ib$DDO4WHC'C9Eu'><7aN4!;+*KqECEFc$G<C$^f\42075!.*o'*=M8'DsH2,h^%,D.3^,O9):KFrd8"
%1G0T'4p6E6!29\9e#3Jk>EUS23ck5#n%2=AJW#kt.ups@'np[o'9WC;h2KDZ%0bMDPS2J2)L"';UdfO*BT=gF0U@d6YUL0MUOO8n
%RWutkE$cS"2oNRF)_5X)5aSk_da;)lTfk(_/^r-.QG>oMFB_j>,RP"_2rpF2T\u\WXV'i[*Vb";"<Mm5Wa>cVN#,7+`(?>&8K*hl
%C'b5-76'Ko]"G+I,DJR.P4=?slX^]R,P:d=/5D-s;8j:jj]Vb7=:s,>WgJI_-WHof!`ogZBi9@Nb$utPN&Ln08Wb]LVTpnFn+`,A
%1oF8QJ6s`h$%R":3lP2KK*C-a*U)EACb#UJ(t^IBSoS(:]PIfRhqf%Yg`9B[RsEAjjV`T3Oa.^-4"rr`J,tZ@MIUB$JO:.o'/51O
%gh%*HS*E"Ap3O4Z"j32)9[%hA+`bV541##QP_ZJnl++Y=jDP72(BqCC'YGPk&Lr;LK4+BAHoD^Ofd6@rj(rL"J=OH3?AJW@X31Oi
%Y[A'X'U8gbbZ$hnK^;8B3m*N#36m3pRp_sik:m#m0Tj4#ZZ3f7%#)nF(`2g*`%83YX+KO@$_Z"3csi]RVFI=sPNEk(#`EB3qW(3r
%"f,U*cR/l'0[Yg&ZWqHQ[6?UH0MW;g;^+,8&elW`TAhmj;&&LBMkLja%&B#FRub:UM).K_lGZK:-l\mqar/3A_4jn_jD-0$`?jt!
%7)M\#$3Fa>K#B&R$KEIR>e^s7^r32r-WFp--/$#iGJXS8EWWs_n?X%8.+D_lNK$FcI%1#`F?9U?_3'IC&982#lAc'9L=pfpSJ=72
%Pb$.*EGLN1H5,Y\k<OgVGj<DUGss$,E[)^6jfE!V6-5TM0d>fN<!Y2lR/A3XAUd)Y,>\Zu_<o$%GsrM<Jke%9L^R%1="#hI&<mWV
%21Z6!qCJ;\8t2Bc`M*MuB;:*h(oSQJ5hT9f:R7_0i?Ud%&*5P/>&4T[4cAcYGh<&>giPD==TBS'Zp:ZoI?An0)6,iIJulo^2aikG
%%k;#O*M?b+2$3n`etJc^Nese!P@479-\qr1JgK0Y_8+h+o=^:&'NB4VSkjrt%Mjk*BOigCAimNM_'E"G=?`>[)]]@3(A]MHl",uG
%3#"?,&Qi1gR<WUEpda?&7%j7\4qP48@)#Dt16Mc0L=5`[5+W&0*^A$[!<_h(@D*IXLBB+Tjg)B,-P#'qQ';%o?g4sYXPDlf4KN%)
%MTk5Zbg<qG*$)d5Xqbo6MrAir#Du,?4>.MDVEs.uni[glCjd7<d0("]c"opPWu1aI&d?*g5/X'L)$RtV49YX$eJ5[kZp(N6,m\Q\
%"r_(1d\)n?M]<K#9gQ-P'i<hcqNCWoa:uoc;=K+,cJhi-`.S\,DF91G#?Var+>^fT7Ke;[fo-@IMVHBXafG)hk<OGsi8j,Fie,L-
%!=?,l!"8u6_kK(!U^a@l)1&;=8OAqJ`eaq=Qr\3TqXn(7'$,rN;pq;VV((bqClcadOg$eIP*e([R>U=*U.H,/<3I:5DT@#g(PZ'q
%8fC>F''">',K+%WT50>b+\EO5K7r6IDaR4%o`eNEF=EFm<IjRAd//pT,7#\uFTa<aSp.)`ZuL5e5YuSNW/)%doIB[.[pLpn-j8J<
%.8](e'cPS52]^h]?[a]O`:PuJU'sOA2\r&9PDF#')-ki+3:/CQ6?K,XppaQS*""h#Z(+MRcG5Xni8SP4$4sIB+t0*&)5=_GHK/!b
%dF4T"RX2B@>*"=DO^%%Ug\p=AMFW\[J<DjCf*"pp-`j/9cQbmJ;-5i&":1bW"-&)WEBbQQ`Mc-\"c%usWcVVWXn#I<jY.D<"4,IN
%7[!.hf)\D*Y\ej):ZmAt_/`=a+!OO#+DLR46:W6=M9LgO'mH:6Mbno2h@V[TYXX*Oce1&1=FqNZ,ppEIA1?\!)pF<kB9]5Y$Gu3S
%&0>pU^>3L2?&0LL+SH!DetWN'oKuu<0I1=OQ_4?6.0Jm#6q9E^f7t2>N@,h\,TqcJ%A$Xd5Wi["RP(cMK1YG#Ro_q/&96>?(p'J=
%C_6G=jG/Ws]MtiFC*Q5np-Ig[I]X5BcF9)L'HF"8&sTSt$Nd_k/fPG?;@nR'o#1-6gHcC$m[@]rFK^g`HH_U\E$KpL+/UeqLk;i?
%p]1[M0aP"N4!pc'6%nG:8Ebio82)I;Z?UiXOuWi=JVG$rV$pXrm70_jmcn0mecZc:<D[H3AlsGSQA,U+C5G2,B_5D3U7N)beN[)L
%@MBDEj3koDEEl[.:ghPK-=+jW8g"=Rj@)TD.#<VN!X^tf=-D,O)QD!^rVA9><u9j#\W9sm+uTs>Cq:aE""?(9`Q]-8Q<td=lGKbU
%MSO2!M-M/R5a][&g"iX9Kno4M0+*X]F*27;(eStZ!65eq7.,ht516Y?pWfJm)`m4#9::5?!Fibf#VdtFTcd*E!^B/:8[Y-q_Nf+d
%aIp]n:X4\>+pL7Y0LnM>&,T+$_DWHI1SU3?/"fX!*eqS1,/>$V=6RKiWrR5jK2WCdGd3?*!T$<`7MX1V*F>/0"7^?%2(I]U>*HKP
%K$\G%1tE8e-A*pb0UAk[NY%*p'7h#h\,sF_]SmtKj21%_,PipA3rM6(2\Cb'icB7:p)pY[[E2'E.[R!=FSlSc:NbYGnRn4dT^-+P
%Ae672Oj[d3N8QKpd[*$:J;:Q]Q8??Unb@)DIfrjp!E'X:6<N&(m^1r=$g8(EE<87mb6qWrV]G6$6Fol-/"&Ot1B9NF4PM3=)hb:R
%RI:$H#I4!FAG\3tM&@8f6$1MK@X09rnHAC/p>Cl;f`&",IMdc^GV"u(:]tn1fKR4RZk$R'=B(ZIpGG4+%Zl4-C3pdNEV'?^cR]ju
%Jnk^qI,+M&L`dL=;4u\,V\2?XqSU0Hg(D2#%O'C)@+h3uCbPF59Uu'%s7(,n(KMD8$u(1qXHOO-2+dpYGfRqa!bDLV,nh]&#qLp&
%3m58PBV0r];mdRH2MR#43=m00YY'!XX3Cu%2$b9C\&9!-kM%5]X,rlhB7kp/TK@SBl4g=K08o:d;;o^!aj68\#n$(O?lY6V`hKMb
%:%Z#ZBHL$DY$hflN^h'6oAQ\X8VCA$r`ual-m1HUk;UK70K^cs%D\)N7KBJOG!R]E0E<,u4U[6K.tf@%7jnL-FG>2\_b\*eqX1XU
%ED7Vepr7E=O\8E$.,eo+Xohj/S/W'k>^7l/@CjbRR7p2.XU$V2nD+KY/U!H*_@:"2b8=%M(THn+Rp]?M-iETW#AUr(]&='V%t=?7
%C-!8"OT_,#*jY&i!Mo\;d..mU)FU9q!BKkR.n--iq!Tg7a*#g@-bpaB,VN\`BdBo6Q4UVq&Ic$\F.g?A?h%5R9F-r)E*[Y^$sWQ@
%Lj%('G):SGm%g3_N8dd%kJ\'?eUd/pZ1pCIij]OKQmb3BH?3C@&Idmo(^T'4#rj;02^4*j7u?7-3,)n+a2V`,f]Ymi'=a$Yk+u=p
%e'<3J\&S?,?e9hlX&a2AKp^\UC'<(2)JnX<[t2ds>.ZAlUlr-1UB%?P[R"1#DnP?\/(s.E(D+@-]atQI$$3bSkjZ&7,ib7[b\3?b
%nkU)>_$NKL^hdrma+mIUqO^T7^gW_F&bu[kISdn7HZPJq"n/C$B04.I8qL/Tj.mK6$l_O\K:q(r`?$[iA]q-89.db@%aa2;-f^a_
%@9hAT,9o0VC]l,ENo5T\PPQ=Nlmjpm;;']i_%.Z(_T1Gl6Y3BgUhhNtVeUW;Veu'ZfU_0I@+hIaZu;[T)qBZ#2&DB-nRWX"$:i)R
%`@/-_`3F$]rn-XkAsP/;B(Cj0KiLl94,L\=OsH'Gi.R3nS1lifj.e!pr"%E^gW$%MiCA"lU,r;9%lMTd%DrlaZXU@3VfePd_&K.4
%8U;-kr;uQ1/&8CO:c$<?kV0?5N+4V#UO=J)5f1SJ:)H%s(/%!Rpdoo6'0>&ZcH-s/$adUf9%TlT6H.m$.-!3T>7r2#+"4h4A*EF<
%:-+Q7).qZSjSRZR/19JK6t'?S8HYaci^4qI@;l>s%%l$lW\r`j@9hS,UofV6]NGLN8@3V>#^pt\dU;Ze6%DgH4OoG'[RI/9[Yp04
%V*XT<=UCFTniArMWVS.a!gUP'*c#jn"Xj]F9NZD3$RW=kck*RH@6hH4*o6$WA]\f8ES9as]fj>(Di%5I3=]rEQl-j6&K_Bcl..gP
%*\F]8[bFos+(-Uk/ka&SPNW_k"E<V%)_S()_!AH)5m@]kYK70]0b$X^bW&b\[^?3&MIjI0G%Hd&6PiM5[Y1;`b,X->2B@!=YrLFQ
%e#\p)%n02Sl9BspggtN*OOg5jB[6n'F*[bGp,iC_ISKQ2+Hn7i!'oK5C(0#f84D%@_Oe\<CCuBQ!/r^R5o9=Xga7i4Q+l1DloI=`
%Z6URDEl`;\Sen\J(MH%K`$?F1%.97)`/70'%.DQaj7S<OkW`Ci(RQB#b;GF$Gf(aX$E-U>f1VB7KC9$G5=pIc2SMY2h;JEG=]bcE
%P/:TlM3goI*ifc;A[Cld#e]F/%r7PSnL/a`$?-q7q%,l^rr<WDa'rU9n/,!9)9h1)d4Dr1`Pd,oM;Kq.%l(gl&C\+V*ennk-/H7B
%n99r(%_GpK?Wpj"j?.T/&)E2$pD8rg$s"-t><"OH+03<,5iCVe!&L'g(("Ug?@HQdDAP+,L<E@?5q<a%Uj^afOG!Yn"L$%h_K^`i
%SSu.KKUn<aMd*"PIGf="Q3:52a1'0dp]9765fllaQ.4d<5??4+XC*dAS!!uZ>6Yj?_#rSso1[:1F!,@q=_>_Y'k"/Y@IO^W&fn1.
%$3Tso`DU5k()V=K[lNG1`0?C$fY2r:=hs!@Ta&I4K+'dAJ;8r/)iKqC3]iAFO(5Mk"LqMD1RLVoToE:SY"sBG9Rk9:hYc;@<XI;#
%#hZh*=I'1=Q`A(,M"bAG#-Y_KCgLmhYT#!h-_@CM6M-7>.Z6(@!>'(@/Eo8%B&aJTo@T]P9V=^\_I%dsAEY^K@a1^]R$GK5Ra%l#
%fJtS5TE9W6,st&4Pm5UEfZQG93JSUeG!.;`oWWj0,[/$,TG%P!TY^70DfVZVld2VhYE&r?SlNghEbnd5#f//=PqHjF6e#Mil'<;.
%n*\2Y0G"lI"Kg@#9U<,M-&S3j8#dG52NO%?+J]dK4a7,e5obfNIq1%r$3JSj]CPIF:ZbISKJ)qnCLGiW:j<8j0SRcK2l`Mdd-5('
%g_@';Ompq2%hCUQI!ZDJ%QghpJAB<(P`UNZm=5>#4,S:$"0W"#d9=D]6Q=F_rP^Bb_T?V81gF8mBhJ/BpmR)IcoY4u-oTnk.DPdb
%BQ:`W,O[bRaT:PP88).]Z@aaqFUtL-A>nA&$"XC)Q`r)(-G,Rs!A%?[*9iOiX>Fu,PWrComB(c4V<`B.RUOZn>'SJKfCW;2`EI@)
%7R5-/-n`Sm$*&bkW7D'V"qQ]]0#-u\R)cNU=NkUFcuK8HPL"I*`F,^$A>n(s8H]^^@5D&k&D!1njL5J(=U4f5o3lnhPU&W(%SfE#
%'dGg@N7bNpGUc9c'G@XO"'pu$Q`qHT4rLAC5^j1SCYAUp58:D59kn>ZNW>=hTE#A^=:(@@1_D,WQ@"Kj:sNh(X%[6h1=;8hh%h#G
%18B^*)/e*eiei(^plZG_)+>%O<F5c$Id\AA5hgIZ#/ne<Qcul%Z>)6;`"BiI5XE6#&bB"@GUG)3DJ`>RMW/+*Q54trWe+]I^b<7<
%G<8_to,:du#?;+tfRW\'D3P%g=T;ojnU/hWbWO6Vg1'ulZ5q!hDRL`ccM00.-dTe*X!A*LPdm1WjEHV00IZGcgWhc-+^W#o8*LI;
%hPLN(?fDLlOFl.P0P,QA'pTF\@)suH<'jUs9c5c1<uTVSd]=;3Y'bjW6m">FRS)mm9*aGkEAhm&S.PG50gT7.qmm%n+$D@c&rOi)
%#-Q)7bcH+o!4?8*ogdqN`Y#b/\RQVI<Wjl`-h7$an5'8Ib6T+hLWd6$JM\Wp-mqLW-3d5\-!epYj^1H5V(%cdZRM55TrJ;)R:>-W
%Xs(eXQuHRhDBnO)D%.aB&OB8A/[g80VZfm9_.FuA0g%(:ED.@;<Wjo!-Lp)ul3MeZoB$c$FHFF<#BE_LhSdJAaGcOf=(4c2$u+>G
%8Q*_FFE8kes5E3CMfBsR.XEKjp0564&Q)^UL8okp-*cEmO\-sNpR;SN&hn3`?0QnIQPIY^/'m)X,[pW)+0=!'*GoZ2e*<guMdUKL
%@:](7m@=?,nE<FE`)AF%:iHTSgWpUb@fY45@C-r(#-!&b`PP$;*)8aC38b]gYa=f-T]U/Pi\k#OXCAcpZGba<dieg@2%=/:f`I.Q
%@>nQ[4\ZN$>>#2N#6Sn?Td0(/L6n[0%P'PR&<7d^i0`;HPr)Tf="$(&)Q>V8SI@?0`;0+8.Yi^/-ud'RGo^RP1s7_\.YoF!%EMO;
%FX;8HkM"H&6$[S6Y#mPUShCmF>$VTQbs\>dMC$p;R`U^4*$R5'J@L^;@^Arp.tH?H\1$C>d4mI1m:!qQC$@m6FdZRtNfRm>:^,!b
%.0_2VL7eb3FJu@\TQ)fOAbbRibN@pJZijiqL3=%%9*-@M;_ei:)0kbZ7obohij%+Kd-cVkiWV;"[;qZ;jg1;4,K+)\lcXC0/Q0p)
%L=7Z0Li<\9n4G-'q2:)@l!p#(5_0j19Olg<qCsJMKegEQ.,^qpoN&R0j+=AWm'IThNa.NtJkgrkQ75km(q.Eu`tl)(Jp2.T9!e0%
%A2-A<1R%qB!lKo<8o)CCU\dYdON>h1',a$=)II67Qag$&P9lHUNWf1cLk-a^TQ,mF`IVRa_/o2f[W*Q9F@o:0aTf&;r89^b(;3j:
%6Era>n4aM&dJ`>;UkSXP8d63C-rbD$`A&C7`YG-p2ACVG5Z<<`)T(Bdl^L!i`RYrTCGEO=h3:PF&+p$%e'++1,\<3mCAGR,j[fdV
%CIOndeWc?i=OpME`.bAld+615JQ.Gd=7U\bm99o9n4k+D*XVGs+2"=)d!67:hM2f((.'/mmc%&t=\@$5H.G[2=FkR*d%E^@<-M6L
%i_7#]PDr[Kl3Lr9dCog]Q&%%ba4DDdE\2IEZI5F$#nkD'TX=?qpX3c:$`H6GY%("B*1P-,r,I*f&ZEL9-4aFKXC?W(dWbLA,/jlm
%dUR_8.`bKC8YY7t9J9WLeHs=:_*W@9<inc'3=:I3'CrMB*83fZc&0"GPjW\TC5SKY\6#e`@,\nb&#:'Y^OBESb>BZ/J]2"0#4^?O
%0$m;->ckrZ[U<J\"MG48@aef5csY.aNh_1u&j:\W?XlK_@tjG8pIM,*,V"Hm,@WVJ/n'rRlmIBpU>jYPV5sU95Xd8*<)JgP@t^tW
%QP(Oe0m<Rt3\cZ!Err4q<2n9.Ti%he9^5u4=W"k,g7\sPO1BJ:#gcruT2_Kq;U(3Ac;DZm:."TO*a]Ch(j7=F@G9QS5`8uF^P;3>
%U+L`r&SPQs.=kU9D:7`:kkR(eF/%EfEKf(n9g+DXEdbCl$bubOi=Qp:I!8J_L=\HjFqb,o..B[$a!p+(`=*9dbKW_NAX@T#j*YW2
%J=OO$*VWZU\cC/e6sCIn##PXU+=BPL`!MECUQE\WHj>0h-%m1`&W$6D-&==9Bip=:>[FSejC]Z:!"E!5'`(+@/_ehn'PEgr6&9_n
%;aD&^1LNM2!of,/641a7.WI_n"]h9Bb9Wl;7L\h_&>(b8H4n](R(c91"2=HU20^^N^g@(!)Y$OSJX;5"U3]gB0M-OX<<_EM8m%C]
%"#6+;U+e"u%AN@@J=I%uPpA6,O[AVdNi@;O,#"R\E`U.k?D7c(m4T@`9miXr-.$4Ib@s4jWXTI_16rMm2W&JIpZG/1gehQXS4G1j
%%;g:F;?:c9'X)fDEtSOs"VHPiBqpmpf`Vh*X46hK2)54kDFCc\HZbg;5eO7X)\mN"ZA'<d+);"XUo^NV0Z=TfEWBR/oBf..Ln^td
%7A66rI/f62BhBFkoG-7KVhCq"'TsA6&>OBg$')?g0U@:R&E8FCPh10@hMW:k*1:(B.tjhon>1Xm:]tJ='ad<>&['E^":e$S%O-$Y
%:JOQ+%tb)I(*j=X[$Dr<N,S!P$;b0$=Q6Y4@4!9L:4dqSWo,^jBVo#H+b1K)g]kdo;8(E;M(!;:MCePDG<4ub5ruogOI&Y9OGXNG
%f]l:.Q.DKK4b6%U1"/<p)C3OlBp207^4\M8BJY-*KT4M]^>WTH<aCIf**l80\W2[p$SM>h]<4Gb?0D#<:P2P'/26-Q`AE8Mko<Vu
%3VDV<M,8NZ%L)/Fm/Sk&_VQ/&d(hA+9TDG:ZVCk+a]VImjK)H.jW*IBV5*l(%pMo0B&N4-@*d@\"d:pCCPKFq1m#^["dR$)mKCK`
%`Y?Fu0S$;hCR!RUX6]YOA-d%-(Y;4dO-s36n8pB8:]tP?Q&:2#n^,W#QG>k%i[Kp)#'+=],>L;LAp:)HrqM5Aqs%A"R^51I2@5Qo
%BkesY:SOT&ZuLt>aGuZn30FsVeHm"'1!Z3PjmqS3VF8s:F4sJa9Zhr;:8>C&'\c3)BHW##%Ma)amNf2[[M6_UqtMF-ROM14PaZsh
%)4G5"VnS06r<kK&-\7PVlff,nMR[)XJR5i'=aK:+MA@4nd;[R.(+Z<A`Qb!li_^2n/@oS!c;*-G6'3^VKR3P2SVWqW1+/-NFj!5h
%UO-'1aZL_6B4f#ZU!Z[^Rq.s4:m*-F>E[6^)K/0^JXK);U@<O_nYY,%+'VU@1*?;B6eZA(KS-1]4>D,K#W7^`>m6McW9sf91#<Va
%ZS?tjj-l_o(O%`.nW__Zm"REdJ&1l$MfaR_[K8neQ;FPE(mc1mV^ko?Mpf+>R.iCJGf]>1:dCN+L5e74Y&BR(Ut2U/^lOUP_Sf$7
%?:cW2W,",AS0AosMq:K3:lSe!&`[[>b'X5r&naX4Gr:*-@](o&-n6?$D^C+1+:9P,-u`798HRqB.#aY^EP5/:*)gI3RVqXeR:n=)
%j"3G\^ohg=(j?,tGsEo?\(/'"dA9[t-^g8).^29`!ii*C6[feNbFdg1_6h=@$$6@!q50f/KcUAUJ!s)^aHGB2VC,m[9%OR<BjM6;
%Pn;MsC@0TN(5[.T)3IINnP;i4?[.KIS9M(`<(l*-eY.)B=f(]Ym"?+bRb2_D6;N5k"Kq#a&/sS!@1;>gju04iLi-38eAed,4Vr_q
%)ht0qcDL>8d.(d%>n*OgXIqmcn0"[gKmH'KJV2+2j0`[:5E\prTfhb@qp,>]f%`ct?d2GDQ;#_+M9i(F[>?D8>lU[W7CV?8$u+o^
%@YHh$F%%MH-&bHd0i:BjS97dF1CSCSC1CXJG#dsOBHW#+%MbH:W]NXlN'2kL'0\SjP30oO3Me'0Cl0Robhqnj7o-Y+2SHAJh-H*1
%\ahI`5fI_bXq,6de)U'q%iaE$LPPcMOWLar#@FW;:@._<]@D.;JkNS>bL'P\bcKo(I?KV)iojl+NV=CLJKA.Fnk&#[n]G!-Xe#gi
%;(;#E4Z&336\ss)^l9%ZSR3-TTp$IRf0F;!R2/RJ3YYCo'0Utoo[u=*1_</GXITcU0:/D+<s)c?"!F4q`YMA0<J]`uNiNpkFqd+C
%T>ZkqA7I#KG^dF7X=2RfX5aHn,fg`d`>Zr`A#^or^e6;P;=:id:sS=H7$g_-K;I?[OMX`p$6lk6,c,L@'ZP,gXe7_Qfa:>oMaAn0
%"k=kgX!/j?V0k.^L9gpgI:90hi94>ZB4+%#op7Z74_]XA22J<U'F*jN9UK2W3B0d]I_DsKVB)cE:h`d#f;;;mD&+EG=/$$KW+o4A
%jMg9s?9;nB]ee%C1---]hm>!5r.&'"56f1M0.6Eq^&kJ?0;PK:1CDI(_8fr_Skb#0nba+c3rGO7Gl8-nZYb[gl2I1C.$So=&]?&5
%J<g-eHgbP0(`_U`m.__ifm?O$C9tBjdKLm)K_KqVJir`2B/2nLH,[UKKXl2i2aUg-ZH::1ka2WB!d5Njc&/Um8T_bJlq,Bbdu`F\
%M'.`Ehn[/-=;aTSg/R_ccn#S.'kU"WMZQ8ZWY(pOaTLGoJsY=:aC'/-a=>MT7mP!khP5\N95)MD:qH?&5up8:+^RWIG\dpf994]Z
%6-FTh:qR%QFTfG\LFO1^5k.jsVAG#.3MVoVZABRZKe"DK>F9L6dGUm@$O!gVJ`;)XXu.s<`rSQNP0_T_8)p75^7tq]iE0L/We7'K
%NIcCY-ZC?+XT.23\+NFX)qhn4d!tgs#$<O[hTTO$Aj8k`2..PX2=+TNo-=`ZB4M$KUW$n/LAnl3i^*j5bjKDL4p`/#SBbT,&]%"E
%,#1sS`%*[pT[=g?qnB?n`GK1BWO.W^";9g9OcbOD`*9\6\t<IbC5_Wq$[KjVYc,p<*s7r[Q`'EX\lh!QLYE&Y`))c6frFGeTgm""
%CUgU<+;LJ#:o!$L2-eeYd+>IUN.,.g;Vo"2Gf/_qmUHWaTJ&29%/F3mm09S7r8"qVA!+jO.7aRN9ZIhB&A'+Q$f3RChbbd7YP9=1
%,q0UdBs$+SSRR^d>uI,]B'PjkI[V>,!e\b+NE<qC'3]Jl<=b8iQtW9jG`Np=2<0lF*@ORiC'=&<F@]B]At[^F"6r]VCHC=/>]/.K
%6p+@,Md+&\liNcqOYT-."X7'%_i1,5Z@Qi$/#Y@)=^"d0'+)CeLB$fQWR`b*bh"+ReN(pYaW.t!\*%g@#4m(]?o=^9Z$gKcS&mLn
%Y)*V5D"Zf/iqXHm^3]^FM-LAU_1kSJY(fiPQ&3SUkRER1-$F$s)sA?F1b@aXJE9E7@dtuQ)o38omBcr]cuZs^O,=>J^K]ikT6-HT
%]EkX1*<s/gi0ABL"hn#!>Fbf4-bnpVX:8W&i/)9i:4;qRpVFmNGnIX%*Clhc=&n&J)r4?WRWfoO"fq.L6aYn4gVej+``<kg('Odh
%DW0>Cp5Q$a9lC`G#IISR<qPTPd,[ecig.@dkm,]o;cc?@AQ!6H(fEm?6J?>8WfRG8lL7<)+r(]4J_E`uQYJIM&`gqN8PTpt:tJAQ
%!?O=c@I4XG%l&X'0(()dQ#fV6q8*=N"J;BOio<qr;siL>Bal;U3(Bd=33HXUnnK!W&du;@H&A80D+BYE=dk\U,YW+j\m5\a-?S7c
%jXQ3Y6.e1cb3Cps1r?TW->S)7gIYYX+:F%*h<^8029Va^eUGb)<'M$bhHiG6)MIqM<8434dES?&?F@da9J'a`5D,ZCa(6*A:W@I'
%aC48R$U-W$f^RCuNXg<(i:!r0DYSj.4ZZqWh=/Wk&*"PrX'RbdN/m%d0.VWKCN2D:TAU>Fb,TBmIF$Xt&@)8aN]urN9>?SH,KENk
%GMaidH=Q+,Kkf*(hXLmefNgN#E<kG4p/30`XA%RoB*o@EOG,.j&GW+%2r5,XV?MMrY)c8b"DUb/@ZiQ@&q!(b-@-GM?GickQ\5T9
%kA#OWoEcWMB$$2o8J%#Qht_W82(e<@7r^5UkG<LhGdY_:8%bmAG$JK3O#5/'kq%qC,q\oZ>$dp:YcPQ$6(T[LF*2XhfALt_5(^kS
%*c!=@K)8_K.?>KBP>_CS#VC<LWchOk^-Yhd&Cqn$ZT,Ze\-g)dmrE_-hs,"#-7:>c,_+ojbm7#dK.89hH]SRYcT*0uk=[_-4=fI/
%H#"&d+V1U9^h>&(PkDu?-,E[FR4#D+;EuGo[_4:A!gO0`..8JcW]73=p5Mr2(5-0Gl]dBA!DR5nrT88mM4'41OGS]5&B/[;bB$$7
%3aOGo0o>\d'=oE3,s0Y7iadR=k`7!DbOTf;ZX^.@"VW>+Kb&mF[E(5FjXb^&`c@#,f$/:tb/4]^jjoo)k\/-@/d`B=E_X%f[`gO`
%dShK=^42pfI[sj5Kg]UP=26[$g?iK"9=^LUnQde3.l3@!M_a5-j_X1VJLp"m^ma+R-PEd-XpF]O6510.du@gkPQOXmApOSH3RG#P
%Q#P5Wc%5"E'dj0#V.8<jC@/.:33+:+GD]B=[,m;`dGB=;&p,M0NpOpD=`Q!h]sFMVc/%Zb+kjP_kQk?Rolb9c`pH*/S-?V!!i@O4
%,oTc'-4@Ck4kKVoWmui;D]>G%dCB-S5,6%[i6M-+o0DCq>/uukejU)XF(h(VF3AlYrI(u*LIJ5V$o[dD\SYs%BL`_?)shQj3q\P)
%Mg>3[9,ZG_Wak58!/`#^oQLe:U1u-e@jFZ.3ajTZF!A$4^!!S!829VFE0UL>\:f\5U**9Go,8BsS(.!Hp)u<o5P%4V?QTVdk/>1<
%E?T>qoOa1HMq;h9o[p=M,C2*m?bV8N?5Q)8AZW"ACI+7h"E#VL:rYcF6StA=F-;g"Ys4B^bq[;8>W/JR/YGW#14^,h?'&XH]*AZR
%,.=FEXs%<7&fOLQd#e>SPV,B2gKcX$b]!_W9V.*YP#Vk@J0]ngeYJ?:1B09WI)5ndi,K#=#td#N/Cf'hJiLj@l'C&jP)G=npXN,>
%V_PIWrpelPk,"8o:5Qnt?Fo&r&U*CP9(s%o7sF*lLFC,$Wj1$T.\&_-AI#4X.b-S^aod=q'WPLkC5#R."I3o(BKJK5H'IR:[6G59
%J/V&a-ke9*9VD=H40oR$?Bc?><k%+tFI18c&`,M6Mb'#_9=JQ`Xn-omMCAE.#sEPef4(]bCe+=%K`T,tJ-7=Y\,;5+'HS(n?d]^#
%Xe-N-!('O5&an&U8*V33-b';)j+9D]1;/L1Li4;$&otq+Vr85qPS"LHmccAX??D1%RZ2ahg.CHS6\&@RhBmk%N[Sb.La.N`DX>6,
%6W*"SeYeR`K8*gb"Q<0E[;aec\VX(rYB8GaLLhIV?nPXlg?r,n5Bu5cD7p[Z[,8:JS?:I2qCsd&]nbY/@(YpelsT\0R'ir)#M6pE
%+4mn1G*dobgZATS7]g>;9t_b9`HQe`pi[jr7us,)<mEh7f3Oo=8.cP9FUb?KD,;6ACT@qfPf`;rI`MulnLX"Eos))^/*@+T2/"bq
%jBro`BqX&E$<<95Wm!(ZE[&?OQ`jbb,L$chC\`hn4)I`ifOQ&KN9u>Bert)93iJInBP:bBrH9)RChmX6K:U:@>+_?hI>LP\eBT4T
%q^8!rc&+!mn3URD7?Nrl+4ih'[';ZZW,7I(f\^_gP1*OC,g#OThMi`%b"'@Cn5PGq+VLq+Ym`!/qo2GB$7u<jB-GJ0e85ocOSCq'
%)H+)><1FaQeEAqbCaM!^aGHc.X`<<^K[X8",d1@;>'Z>0D!HuR#.7_@[&5iE>_-e+&-=69*IWitnuHs@5pPe+2R[91)+Rm*bs3;5
%+M&s?&DHC^[*/+s*ALJo$L%<$UO8``._=rm*%T,`QT!r<eKV:W$]Bne8b[Bd?7UNsVn"f'HtJHA%jhU11eL%=ZNNHJbRQS/WVCPS
%M-iJcT)@n%%9,CfUl"g)BL^^bqCBgTa7GgpijU^B*UqkV3AXaQcNZJ=`M5(d/#?sP=D[[WBgJJ^49n]dCbuYkK:m*,k2BUKBK4Fd
%F)M^:]j:J<Hs>XrGsoRi7.V.Hc28WUTlML/Y)@suZrh#+'D7#U>X2@i5@[*VX!kH-&nT8?5i.0(41+KLAQa8I&B`kj1oSb\Udr<:
%0BlM@qZ'&"/dP2bNli=JLdi=04FUDq/Ea4`+Oi5tbB.XLQ&4EYq*1?8(R/c2QVF?aL]N?D=u$-$Ao(%uHQ'@>3&=e&*/-qaMheZ9
%A%+@pdU8R,5aG,WM!_k_ot<(;0FV^=N,1T>m5I](NND`rL!'G/'E:"3']lu_Gf&Lq7#5$ulrW?ApQBlFW2VEO[L]t@C^!;4U.iBQ
%bWq0K]I_%FfTPY"ju'-R%W[JRmT65>MXB/BLfi1nkTXP@9lF6tP.=<!%C0SR:plY@>d^S/L_k:'0-$'l'Z;BQ%U,I9Tj[R`/JKm%
%Un'!<BhaW-:gbf6(t=ci0gDj!8'J$5=NB0l1G<Z(-Jdq=-#D6HYV:`q2NDp=\1u48nd7s_6)KtaQ-ltilB''3Hp-fi=#'=m+Z2Q(
%W@hRCm1eri\dX4kC_OB8X'l0KS#B9A,LW0$F^LrKl+;#mF\%hE?8#.>W8m?>)9hjkmQ/ESd_Z.k99].P5C1hE`fZl!%mhRh&T5"M
%HF7ThT[Uq+Q(L&+)XZ^>g6\$-QsY22H?4SQ#FB@Zf4lRJ8.D\>6NL1jOL77]SNdQT#"h6t5Hb]60<&t2HLm^C!OLM@)ZIH/b,JXl
%$A`^A<&\%+UJ/d)2MHJOAFHiTjcm=&VHWP:B?<hF'p?k(0<\d7iE+$uHIUFmVsIP0;bkF8U*^8T*d3CjXku%A\dc8XD)^G#)$cnX
%"sMhfB"mtZm/<s,>\9j+SGfA.+V($,X9onWUt`[GRatX_o-g-`[3--L,<H2pl1L<%1M"c[^A3[l*/BkNBt*AFOR78rX81,B1NlV/
%UD,rNdebP9VO>D:4C8\2Vq&nRRn_*WgO&p`4rDG;".MT9B(n0T@-?+Zc=YWeZ.dkLmBrpZI$Dki"c:W+o+Kt]d7m]OZk4hNZ4[lB
%-@<(!H"+qj`U.sYiAIhZ2bKP\JN0S!K![l!h6OAi$uJtYQdF:YW5#8"A6+7S=]$ZB`@8YHfL)Q!nWNDs&dWA/ROAD3X5#uY0GS;;
%O")!W4M61`'.7m8e+OK0i3H<R#:a.#/)Pr@gfI2U('tMOGilnKG%-kXA.t<FIILlKWhq2U@1OS1"c2"FJY8:/KHqb:h"3ZP\LIVm
%fs6^ojOuffVHc#2b`dYbLp3mP>e&EIY)M!+qh8+'"f*H&TOFT0<Wj*)ZrG[;_c>j;ZI=Clp+cg*1m,YJ\8,+P^kO'5HM+:tKb("T
%W6Wj@$Ge<@AS@mL"@esOqsBOl?R7h5i\'O_6mlZ>1F;0IcKN+Pfd5:5/m+[N,^\(WDI5.g9qetnqnsjjF3r3e$C:/**hmBuYFDDk
%i;eee+029Y8"+E4g"8aKfb1S3=N04Oi&%drJ"eW"lEfP+#GTt_o0C5ui`$6)U83CVk)1LaI`i!&7%M#)&F^j^j#8FoYt/KVZH)mo
%bF\i\-AqYU`Js%?I!RZh6]9!]KRZ<;lj,bPe.(h+`\SLVBo"N`EEdnPO(6[\!)L"e$),8I%Z)S7G3<3>Qsdc&PYh+i=6.m*6mfq@
%H4lLJXdhK.UQH'@02O`m)nH[,W]:$L9.8nUYA2<S.qPDG1_;i:Hrt75Z=DhS;UB39>nSGQ9tb1DnI`lrY#lDk"uu.)"4IfO:ZbJ>
%\B.;3aHYGaFi_FY<];KP0;-F;0d)(U;$jtFYIPRR)^bN[ePEZB*X8HO+A'&]JDCNb;,P&Z@[)>E\OL.Jlb?@f&g.$"7&`i?S1:gC
%,^+$h18(SI]t@Ku)eDrGSR[?`8s&ZGRj=JKA]A2bZj`u*5A$?F?Hl58&Mo;oX9*]QanJCD\-%S#F@H1&pFK3n;kbfC2$+/n>TABr
%>oc'Xp1I^+nh@aSk]S8s/'4,r6:NY8Y9e.rn_:*.NUSK$^(iVdW*meg=8T6.gXscJ_H0r(3`I]^]Krq];<,jQE>)253lP-fcSRGV
%YZIpr%9'kUX_0JspUGuRh8=JtQZoC'[sM6(f^Hb,N\5LBhsW:+1\/qK*nHTX=$+"R@3!_uqCWEWKnTEqD;9c1Hm!h/+,j*8<'rD+
%&mZCW>&aZSBW'@&arD%TNGO*e$0?989p>7TO,Z_-ai:W"WYD@up(Zg<W:pbO/2dW)Yo@%RX8Ap24X>\t,NEC$X\0EB,6="6OAM*(
%@q?p2kH%`[f"j@7et"esZG]"4,CiY?oV1hu&ZF_B_P702DUUEob/M8i5Njm(>Q#LbNODUcU4="*BiQE*ieQK+Ko5ADNALSbGVF8j
%p[uZ!)gqX@Z]r%P"MYEi#0/fT,qDLp;Uj2K9pLJh?2Em%Y1e)'TI\#[AS+6IZ:"eY\8]"5!OO*0VYCpj-!f%:^lZO7O,10dOq:(g
%`<B'[[UbI=E@h_b*eC\OA(g?_4P?rs.PTSSP,Th9(M(u\#U76M8FM.*LVVXFAB7WQ=U*'.brCU@=gN+4=OtAMUpe[6&jJdOoVO'n
%fJ)Alkfo2r7V@?AGN>;=]H*_g-;(3>Luig*6I3s1N):/3]%_".2M%CjkVt[EF(FIP^m.s8a<pSMRYNj+Z#`LBV"?rI)1]>'@uf=_
%dNSg!OIAi2'p#WjAI(S;p1MGi`r%I(XbjGg$QS^9*smH3L(D"[V<.pK$Zj)aorGPM+IO`NkZu=H%J1ac[RifhDP#fa**npelKY*r
%\Mkq+PTjNO`9V(lWg%Q3C_)XeMKelpYqts5V\21b6q)g,kQ$JP0?K4a`d$Z"GnrP\HmV513s)OSFtiI:-5E:h1_K7R<W#3L-dp*E
%k-4)1c%+*f<k3J!&m6D$MLIS2S<RjDaFJ=Zdrq6,9]Mf6TVYBL/DrZJQVpdnF5hP:jHU&Xh]ou@f?$A.1/J65&0`$)(J($?[`.'(
%ZCf44.j47UCLo1T`A4)-.I.qEdMAX&i])$Yb7&1Km^m!@mQN3,]#VaWC.f>@n$=,kGQAt65!k>f9C=58U==]Rf%ef]U-R!4J+q"f
%E99//&#&t:A>[e__It63683DMl746=4ErL>**7$@EoR1cKo$)%-8WoA4\;E,f6)W(U_?$?:'oVIBpYo/,/,46Ms=*"'hhPnmPu\>
%=O-c!nB/)I(;:#6VEI.S8.p3f*SAVu316ALe[W!MBU^<%lHi)5%o1RE4eBQ;7iU7Y@,o81+c?uZ\(.d".t>fo3hi[4;FQ<`nKXqa
%hPBU"B]L`,Kg.1#(7s9doPt`l!2/)\8GY2(<BqOR9G$V\fmRbc5iR+]P.'epPpm6>3L:"\N`^V2/GSHC''/)W6sKPklZglJ#i\1m
%.6iKeM:Y*[+]2/.]#lC[[R\$RaA:\m]j>4c9Y%d@2N7JaficBa2o4ARGW7sNPHkoI@3g^$0b5VU[)Y;S<05KoPUe)q<Rc#-Velpa
%Gk<.nmhP'3I4!CFr^$BS&O^_*f)%O4Z.rH3;22]k;XtA.0>ZU0;s(rFXtJVr[%//[]0^<3MQO_:66Lde'ji=lKsOk$/Jt./=k%k/
%.`uC??bCb3KJ5#O!<C^Jk2/X$\CZ*h3"9FW8::7(clN.dW9u'cd&8EbqiOmH&sg$gJRfL_jWi<,'MubcXhq;.dA-WbAN,]12,>d6
%5f4eAHOFHGC/I6$)h_P7FEN,H5a5GkkMPQWM$Y'0\]kIi,+!:J\A%q@5M.!XU/or(a>$RlK.$0P5k2<Rs8+h1)YcUG;G'9l!&_jP
%r)1WT)IJtc[L_d"F0miEH5fnj.@a`mkimN*N:?8jnf2KuY^@n8pYUJtS+*7R2+W1Aqj3Z5'bJUO/*Tf@0([/LV&HjP@?`7F:U)s5
%/3H^GP`dYl,tr*I*&b1tks-GDVan@maA$`e/U1BZ%_<qJ_/oR6*lQck$sGr+D4j$-*Mq.@^ESskXb(XS[n0h!"dLC9[SQ(6iN;c>
%J/`&9D_\/E*L-Rs)j?kDX,bADF]D6QEQhC*]Lq]Z-Q^HG7.n'OoMd2bq/A(IMZo$RMr`;$KM1&8Hg5.'G3[RB[B-,*`;j->.YcL`
%7;`ncS-qE.i]XBjb.^L$Cnn]kXG1/]RY#gfdR7&U0o/r^c*0cA6F6rsRC;6X'r/cT549N2pTRi&;B@\M.'1mlE<R!`(p.=&VQ[T5
%UY9]%Y93=qDXCjuA#9o(3Vq04rdNZsc)=-6H!$,54mM6RLJ^a+GWVd\k@k,YT6+Xsi:D^-5s;Z6gIkqm:F@i^,s]`X88l3D"5c02
%7-=FI':@A@_9Bos+B%Vd4ujb:J?j9#H'(A(`]L*_HR8H];oCG4bCWYn3S5_t@-=BCNBE&J3#^jVT+7V/!%@6Dn\K/%;q'H="`AM5
%$?i.?R3+4R*:<6m1sLs]Ztn>R-A0,0Xe$#1Bb+U2]!jtO5s`/EX$Q1G]2]X!qH-'^OZXBj):B\8rk+Eu1iV+]YtsFDb/,WZW="V<
%X)((sgNRr'[Q+BQZiZ+\Meq<#!m,Oa&H6+ppLHO!RXDVYJC`0ZoJh$tYCuMQ\^m@DAD6_p+2]68r0iVa5-?6KFLhUNq1fW>j/.2.
%E<;kI0I(84Bkhj5$`1b;r<+>0L\E02n]8\t9ao:(%S=;HDjX;*UB>ck&dOau@@F;8K?nk>.$GQc.uT4KLiiQ4`S!;TaDId]411OP
%`-raJaAtb2=0&h(\g)i?44u,!bNYWkMf/FFo"bUih._K9ZF0:M`'r6[5)un>)UVfr8=bnZjI&ZWK%\H;el1T3E%($Ns-ViMQ+@X!
%3@`4K:(YK2`FS.o'd1c/;5A&@)0>DWRLeC2BS@_!6\H95&G]*SJA\c<4*.jdl$!T4UBo>3,Z1$)$$,Jq+^dMH>\25&_9_c1/b-NI
%J-_+V;/XQk`#V`;gd'2MLSh$NmucJ<q+/U*1eA!9-DI#=T3p`F"4\d&=(EG7'?K3nl:n<Q#1;80-',j??>C_Sk>jHUOXeZ]Wh$Mo
%`0AOK3Id9Q1j&euM)IoTef]lt(%7>nM<<h2?]@0]DD#Xi'/1m\fRG3E@,RDFG2>tV5R3<5E:fG)St0WZEsJmr,EB)Aq/]lVfFkYt
%Sm2p^(HSee`#XL"qu%pTQjDiA8aH'JoWWAsol"&=N_@],JU4q7abCB*8J>$n9spHTA\MSdR-Cf:b>_RWW?PP`;3`shm>L;\6juiL
%KFOY:h@]GU/3bpfN>'^.8ZT;`b/ogK%W>)'V*]@I+?1fb+Q^$-9)%X"P+n\h(*'(0N7#n/Kj$[B5q2?TF.Fpt%dCO6\M3JPW:(1m
%Ri[2>e>-)shDo0,"/&U$WjSA>;N)gMSJ5uF2qPVkJJ@Z^_V7J5RT9;qFkpAcNt+$Mel4[E;l?Xm<<Q>#=ib,VCTt.*"cVDf94N_c
%p=prsd7e*Gm5sC2\fk$+[uD#%\R;A92NZ1g2Q.IRBhmbI&`Ih]s!egI;05IJYiP70'Ucp2TObK>MRBA[A)Gt@6G:VfO1:?7f:OR.
%?gT-#@I28))-LI!H:-2rdi:\n(aXPX$E!ihcV'udOQiT1AN6Qt3p<h-UJ;'m^/f,LQk_M5=9cJLaKe]^.-X:+;)']*$jWg$ZJ?Xo
%7#oVRGX`"A$tQSR.Bg0PpeTf8-7o-Z3qVdc.d2d%U9+"EOf<*D-Q,odOt^1gorV>f:lh]f>`J'9qEGqb^e?S74n)SZJBte,I+F-g
%qa\sjo+l?X`gJ2<RQ][>^5S(F$lTe1m5cQr=p&-ddf^7Q6mF-uUnV*(!GHX[+bh0tHi6]GpA/LkUp!stJSUXTo(UR6rCGu4@JeKW
%Ag3W<hcJrQe/ZICV*8Y]_q@GJ:Kk\'L+<i2lq,Y&LKCJ9T.,[QB`,[bVnG8cI#lC!Tek/8:G$0j>d'b!O$.o54[j&:ng.Ga7f$HS
%FahNo69/D8SE]+Q787(iGk.<kl1UiS,F<<3$_K)4-U9F#7=Qio^KgP4??DH6a[Ie&A=NL*ii`o.9&84L;Pl$ILVkm-R4p.;F=>5h
%';pJN(?VQ0JJTCi7DrX)OZfOJXU&4!eHaF_nIIHR/ioKtUu9bUME]p#'1VKh=\`bf-SE@:kg3/'U`2?-EXcL@K^OiHXgh-*V%QVo
%-C\V.l-#)g:J9ErEO(B;cc8*Mkrm)2??U)?s7'[hg$_*p9,oe*bNA79@[Z[hCAn^^dWSW[/7e<q)G4(e9XJ;,WNfu?6MHUR2ON>L
%FSi30SZ_\&UI.b$[M?j?mT^<A70o@*cCiC,][W1FQn1WAm2Z%B:f@qOU2kHr?6].@VDBgV"3bt)oR4*e>/\'MWGrD!nDQ2lRsW^_
%S*DdZZJ#.s,fqbp8T7`Gmm?A^'h-0bf-b\'/6\hCLerD9NM@Y+6kEW-D9?2feLoSaWqEflfVGLW,VPr7[6.BcU!.;a:74gq(/1@]
%dU.rcGa>snGSY#tnI2F0H$!`-hti4FjJ*&hchJGJq<4'sA3ML*XM7N0em1rX@U_3IH+h7&=B1DlH$phqEIa)[[Dk<"WY=8ObjG.,
%Y9!W+=HCbP2\/%@e&-FmB1C3pIS.p"=2!)BCl]&XDH>Em<h(jb%FPW+k8IYshngAX*!+P^ClW8VNbNuMos2OWjPAKd4Z]rsqn,_r
%rjR(6W0'_XR<IU'2=_gcql[?KYG1[t>/u[447RIu>aHU<'P'kk7T]DnP,*Y&aD"#$PHcNP*G;G?,rJ/lou=q=2/]oV_Q'<jDhVg9
%>>N!Ekk`DJ.]03odsbmJe7ToA4^cVhqQuq7IbJ*@3(;8;7M'=<]T1,>.<nruQ**Yr)knq4gJCnq0ib$\f2l'm;&H6qk2TA1F"Ms1
%/>rH*mU_jZWo&^l3(aLW#%F7f$k6t3r!]Uffj7R9\Fi=bgSI.gKO8nuHV.p>jYD8YeEaIJc[o$>%',Li2Rd9i#&9j2"uUK*#-E((
%hGLD'<925\PDLt8SSFYD-b:1[fW3T7NgXHPlt8#ZpUC^6n8UQ4E)JQ>_afJc)kOUmM'F&gqKm&2%Y+,V8*BK54.\G!@6>?m=teOY
%+sc0(0&%R'H@`4BbA)R.hgn4W=I^e,"0*T%ar;Lm6OE394e:=:81\hBj"MttR>.Y+\EZHFNo+mO+B\J#+M'md9h2\-D:7kom%A:o
%#A(io<":!YO2Y%C^Rg*?n%dRY6?-D=`,8P^g2VhTX:E9#!iT)J<fLr9U0uJ3G4FkSoEirb-3Diq^pn`T#&0GG7DA?[]1k<DG'p"Y
%r`,o,RNMa@ii5i@N;]lDG*K$:il\#_#8ID41>ckH#W?5?bdl9B\<_i;J6(+:UrG1p\Z<nW3RSV$gjaXVUD%5@Bk*'pCf3,NnQ\BS
%KVJT!ho2/"Y+is9#9U0:6"je',=L-**@R\Yf;H3uL,e*U<mD3iObFhhfo#f#d=Q%*ZH=(rr<GX=J%48sk_4E.5S>i!qQ9E?k/#>6
%:B!ThlBn<S7=fnrEN)=+%lUmuTf,)cmOV@\V"MRhD&"d3fbf,"^3N`s-a.Tpo7CL1[jt[oZFa3h9D@YiU**t&4:aKnX<sR,41$rM
%Y?psm.hf9c47kB_3P\K,:QXU+gXYB+K;\Q10(%s]1OjNiM;t@XK-Eu+!K`>:?5ijJ6fB`6g+m8!^6F^fg/>p5>Tj<tp@Fisrn8k@
%+?d:*%l\(r9u/i,Xb'G^;qhO9+&O2gN`:gD1ptdI4a=V%](Y_FK(b?;U<_Pk')[8q+Od:9Sik;s7)LprCjb#LochaS07oefU-ER2
%d!&TFqU-f>jg)DFBM\d`86@d-8W!#ANEubPeKSD)(&`!u5^bp';+GM&q7XM,0ob2l56k4]Q&^I0KpM7A.BmXTB85+EIaDjjLNn%N
%CgGgDaf9N+5=(G$"Rb(r);E^U\5UAjUMCHE"F>VFZ'U%d2o/SL,(p;h`O.t<#XN]Gi]IX"r(4>_"YuM`Agf<-Uk&m$k@!gb>Sh6L
%8jA:>#nCT6#\=04WU*u*..(jsVdaE,\He'r40(T;K(de\i%I2n#Z+u<q>s8HW'tqF4ZX8c`Bl04)OQ-=p[ko:DN1]AeEhGPW%\70
%,r(t8'e1dTdrtP@hu)`2IfImCJ,ILgkJ-rfa7"KRqqHT$p(+oB5m.a=IK*+ClfXo>o&HA"ro"B;q#10jIin^^Y<RMlL]>iXJ&\8`
%(&u&W*7KEQI20M`V:`1Af4&^o%YTh`b=SrQ`Sn\NGsi+9/;M0OP0JWuEh&odDf*cbo%lHt(o*IEr;EV><=-&,<p7h4j:7U`FVq6k
%EP*9K=BrEaHXgZ)P-K]e+d:M+H<A[#@VoK[g>>u8nI]o&S*LXN,jP*sa_uP!$'\;o.>\bdpQZ3d0AJdT90j4=`B0e0,*JW$@<q0p
%gk>?jRFpQFY/hp3>$;I`:-\DL%Cf0Q^J@(.T=NiYB:D_t&k55[FB+7gi8WL?R>p[AE@A$/B]3I`Fs:^*`.^C$<+7m]_n=VMrE>RN
%)=pbl4:$%An%][rc%Et8<[&W!br&&KHfliUkg"CAjD4m'.P/1GF)UMQ**33=7$sEd^1cVG1CS,<*:Nk!O):;iFR_qEc!DeWb]d(&
%raT/ElB:e/U-G9%mH6_+?Y1c7c5K(F"r$MWHLtl$Ut2^YB4u)>LF8GRm>D)X,NZ%R1iAQ?[d&tm3:d^LDEY!bGQ&AtC`h+:Ao5Zj
%b#_QWTK+giUG`4)9#V`.b/g.Nadm1-e^&,MBcQ,\IN,6u92>ci^s@&cJ;C;R-!$Whke\T?jEMGDQ\NR$@lue-,)*6,1+9lG&grS'
%9]E4VW)J_L![WjE16D4lc;lN1>.IfQ3gd6S2N3b_G+4]\Q;OY>&^'dg;WR,:L[?6qX%_]Rhk2,'&m<e?Xf)gA!m$H@1Qc.i>C/8m
%Cm<tT7n)RGAqF7OP`rLQ6rfq3N-$"BLXV]mK-$k1]9]7g,G(_!Qo_<_khrp'/!m^Z9k"43n"$m+A38YpC-PhDogUi3nYX]_d&g8&
%TOoK+fq=?cl!R!)B1V]CY_4k#.Wi;Pc=H4a-J6OsVT(N_jB&^@h\&SZ\:,<SU3=V75HbaR]UXg=$E#gr'r2\ik.!s,Q+30'<7?bV
%=sko%UM8!'0os2^>rmPiI$i-HY=u,X%k"]+k"<C-g3&M^=I,9]<'kJX\9'0)771"J#%fh);.m:M),4QN^]D0JKe&WiDPWV16]^[+
%D'rZ6+LDu*YOTM79<Qc7)i>O\fLbfH7*rEFiUeo&D!N]:)h]2g9%e!l:6H,,g'qL.0J>j'S+lLdf2R;nQpF#tRQ52pGUT_/b4M!H
%553!(1K%)YR/U5Z6dpXD_b_Tp[8dgOdDj2eU%8/Im>?12#MEgOg/g;-oT]G7n/]a[[Hail<Dc,'I4rO6DQhQJ.)`4E$D[H&bVE/J
%$X^2f(*\Q;d$hk1$X5NQmb'"2[&Df'o4egem@2R.)9<@OQj9oO"Zpd'crs?Mg\Llf#]rl=a/Q=-/e*.k$0Dn55.TehEB7aqe,-us
%b\#8AN18*fiN'K0H.]T8$aa9ppP&(?j+<-loDpGeI&$HupbPUi1-)g$eF/>2R4OjhOk%q&P8O3YPJ\9fB'UJ+>At!@gYiU0[L8WO
%cr(AJlNs&Rnn[9-:TA`8O!h?,_,DF?5cVN3\!bK%5?#&8aPJcI0XsAcp?9dCSe,bB-`>"Je"4kAIb&s-cN5o$b7,?3#]+TmMCP>N
%,`V4^P'pKGdB0FtEKmjD?]W85H;&b(5r[n9Qe*T;JM#P/JPS+[)rdV'o3gL&V8(),P01B=V'&s3<c*6S$*Ql6+NFD(MQslkIEgqh
%Im-YkWTN"hpj5)_-D'WdIQZroZsTG\"Kc5+'Z65-6YfjM8,)0,'5VS9>tOZi%f_)@[GFEhs6E-9kq.F-n0)Re55)n\!'<9fqh`dh
%TSPF3XMku>a$XtDauB8oq2e_b9Tl_4Bg99Uk)!>\Q_+fZf_cYMM5!tbOO<C)@*sri7HKh$kkLn4Mu-?c^J%@7+u$gYMi@&^8YJk<
%l-M&BJeS&-\q3\2fAfSQB]XXD4;i&o`r!%pEeoJ4=p$8"#B,M_PG_KmLRjK"NHVQ#ioCO.<"LJ`epK9PEW"^#S(c.29V#&Kb)":Z
%"70Mc/`2R1!o7WKPWL>Pc;eJVAV;H>aD*o6BZ?S^ZoaHon>BiR+2:a3?a@7?P)R+BQ?[?qboX(ZAGA`Q?M`g`<@`;>k`0(?JLd2Q
%;BZ;.7;GT&eKF_g?`*PdH.qKSo/;#@_;G.`W<>Fm1k#1RqLCZ1;ke587j;Hh$]>u3$IDorckTQ5c$)!([RF>9ll8nF:jn#3fQ(gB
%4BqR;GuM:7MXChMED$bL#88o,97r@Y"bRM#To@lgDT_"VTlG/\7TWg8kU?DWZf;n/&56$JLKu/ehVc\7r;$#dS#4-.F7b6ZXmA0^
%(+pi,bP[VPF"hE:VR%hr',]AMoF2K8.*IsFpF%'+=Q1T4%YT&h'9kbaT0[P^0TJbL6Ef:ScF4Z.KU.Fg.(Xk@C+AclLjK]fM`rJ.
%?HH'<-p!bKPOKB;OJGPWVtpI:o&AnS2,H_%G#(/"Pl0L_;im[4Z9A;]f*/X7Fir`n#<ab>hYoEJ-j4ulGI_m4Pe!sn\%d+(oJ(X>
%'O'KT3Djg'DUuUkR?T"`:dA2WARj\'BWVFW%#T#@/>3mi"eRB@4NpI6!XO4BhC*L3X?k7/7m42Fd!IZo"XeC,8u7E.Dd-mIJ`mI-
%65GFmE,u[7a<9$UO]*0NHHp%[mm$o-9`1Wm1CD5Ee\:8k*2*UU(K.2T(ZbLo%5P:'D0C5]HB+sSO*ZEX<":"1Z74&5M=#:3p^8B:
%XWu8fM6m,=k&I.0S?qq:+>or6s&MrR\t_dG3nm<-%Cb1BFM!e"L#c[^0qPe[CHfD]BTo#VEP2sqBAlFf:Y(gM+uXZ*'b5k*SO\I7
%&\%J7WK1eA3?`)\b"&A^-M+3K:+GTFC]29./dCVZbj7KAUJpn@T&TnS3<iR[kYQ'2F8n:GiF.b]a+E^J7i-Mo%_qi!WQ.2^kJK'P
%Z0Ntt6J):(W3Ke@`C8Q+]a\Q@L&DpL[;N<f@>ao8'DP>"0h&K_a0`T7HeYZgAsH4VHITTUhPZ;2f,!MIPtM*5B(X]ROn[McEFj1`
%kMm(aDtEl+mf2q*5Q:QMh;?!Il$'lm^c2;R]0CfFY<RI0Qd=Rho\8:$q/>0ho)7<e5Q6HebO>J+r70PoJ,9._5QCDSn)+-<J,]<E
%JD`rj#N'q#ci<RnIf#W7&$Nm2=T~>
%AI9_PrivateDataEnd
